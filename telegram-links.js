/* =========================================== */
/* –¢–µ–ª–µ–≥—Ä–∞–º –°—Å—ã–ª–∫–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ —Å—Å—ã–ª–æ–∫ */
/* –ú–æ–¥—É–ª—å –¥–ª—è Telegram Sender WebApp */
/* =========================================== */

class TelegramLinks {
    constructor(telegramSender) {
        this.sender = telegramSender; // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å
        console.log('üîó TelegramLinks module initialized');
    }

    /**
     * –ó–ê–ì–†–£–ó–ö–ê –®–ê–ë–õ–û–ù–û–í –°–°–´–õ–û–ö –ò–ó localStorage
     */
    loadLinkTemplates() {
        try {
            const data = localStorage.getItem('telegram_sender_link_templates');
            this.sender.linkTemplates = data ? JSON.parse(data) : [];
            console.log('üîó Loaded link templates:', this.sender.linkTemplates.length);
        } catch (error) {
            console.warn('‚ùå Failed to load link templates:', error);
            this.sender.linkTemplates = [];
        }
    }

    /**
     * –°–û–•–†–ê–ù–ï–ù–ò–ï –®–ê–ë–õ–û–ù–û–í –°–°–´–õ–û–ö –í localStorage
     */
    saveLinkTemplates() {
        try {
            localStorage.setItem('telegram_sender_link_templates', JSON.stringify(this.sender.linkTemplates));
            console.log('üíæ Link templates saved');
        } catch (error) {
            console.error('‚ùå Failed to save link templates:', error);
        }
    }

    /**
     * –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–Ø –°–°–´–õ–û–ö
     */
    loadLinkAutoSave() {
        try {
            const saved = localStorage.getItem('telegram_sender_link_autosave');
            this.sender.linkAutoSave = saved ? JSON.parse(saved) : true;
            console.log('üîÑ Link auto-save setting loaded:', this.sender.linkAutoSave);
        } catch (error) {
            console.warn('‚ùå Failed to load link auto-save setting:', error);
            this.sender.linkAutoSave = true;
        }
    }

    /**
     * –î–û–ë–ê–í–õ–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ê –°–°–´–õ–ö–ò
     */
    addLinkTemplate(text, url, name = '') {
        if (!text || !url) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ URL —Å—Å—ã–ª–∫–∏!');
            return null;
        }

        try {
            new URL(url);
        } catch (error) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL (—Å http:// –∏–ª–∏ https://)!');
            return null;
        }

        const templateName = name.trim() || (text.length > 20 ? text.substring(0, 20) + '...' : text);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        const existingIndex = this.sender.linkTemplates.findIndex(link =>
            link.text === text && link.url === url
        );

        if (existingIndex >= 0) {
            alert('–¢–∞–∫–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
            return null;
        }

        const template = {
            id: 'link_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
            name: templateName,
            text: text.trim(),
            url: url.trim(),
            created: new Date().toISOString(),
            usage_count: 0
        };

        this.sender.linkTemplates.push(template);
        this.saveLinkTemplates();

        console.log('üîó Added link template:', template.name);
        this.sender.addToLog(`–°–æ—Ö—Ä–∞–Ω–µ–Ω —à–∞–±–ª–æ–Ω —Å—Å—ã–ª–∫–∏: ${template.name}`);

        return template;
    }

    /**
     * –£–î–ê–õ–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ê –°–°–´–õ–ö–ò
     */
    deleteLinkTemplate(templateId) {
        const index = this.sender.linkTemplates.findIndex(link => link.id === templateId);
        if (index === -1) return false;

        const templateName = this.sender.linkTemplates[index].name;
        this.sender.linkTemplates.splice(index, 1);
        this.saveLinkTemplates();

        console.log('‚ùå Link template deleted:', templateName);
        this.sender.addToLog(`–£–¥–∞–ª–µ–Ω —à–∞–±–ª–æ–Ω —Å—Å—ã–ª–∫–∏: ${templateName}`);

        return true;
    }

    /**
     * –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ê –°–°–´–õ–ö–ò
     */
    applyLinkTemplate(templateId) {
        const template = this.sender.linkTemplates.find(link => link.id === templateId);
        if (!template) {
            console.warn('Link template not found:', templateId);
            return false;
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        template.usage_count = (template.usage_count || 0) + 1;
        this.saveLinkTemplates();

        const messageInput = document.getElementById('messageInput');
        if (messageInput) {
            const currentText = messageInput.value;
            const cursorPos = messageInput.selectionStart;
            const textBefore = currentText.substring(0, cursorPos);
            const textAfter = currentText.substring(cursorPos);

            // –°–æ–∑–¥–∞–µ–º HTML —Å—Å—ã–ª–∫—É
            const htmlLink = `<a href="${template.url}">${template.text}</a>`;

            // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ - –µ—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º–∞—è —Å—Å—ã–ª–∫–∞ —Å —Ç–æ–π –∂–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
            if (textBefore.endsWith(htmlLink)) {
                // –í–º–µ—Å—Ç–æ –≤—Å—Ç–∞–≤–∫–∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ–π —Å—Å—ã–ª–∫–∏, –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                messageInput.value = textBefore + textAfter;
                messageInput.setSelectionRange(cursorPos, cursorPos);
            } else {
                // –û–±—ã—á–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞
                messageInput.value = textBefore + htmlLink + textAfter;
                const newCursorPos = cursorPos + htmlLink.length;
                messageInput.setSelectionRange(newCursorPos, newCursorPos);
            }

            messageInput.focus();

            console.log('üîó Applied link template:', template.name);
            this.sender.addToLog(`–ü—Ä–∏–º–µ–Ω–µ–Ω —à–∞–±–ª–æ–Ω —Å—Å—ã–ª–∫–∏: ${template.name}`);

            return true;
        }
        return false;
    }

    /**
     * –û–ë–†–ê–ë–û–¢–ö–ê –°–°–´–õ–û–ö –ò–ó –°–û–û–ë–©–ï–ù–ò–ô
     */
    processAndSaveLinksFromMessage(message) {
        if (!message || !this.sender.linkAutoSave) return [];

        const savedLinks = [];

        // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ HTML —Å—Å—ã–ª–æ–∫
        const linkRegex = /<a\s+href=["']([^"']+)["'][^>]*>([^<]+)<\/a>/gi;
        let match;

        while ((match = linkRegex.exec(message)) !== null) {
            const url = match[1].trim();
            const text = match[2].trim();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
            try {
                new URL(url);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –∫–∞–∫ —à–∞–±–ª–æ–Ω
                const savedTemplate = this.autoSaveLinkOnInsert(text, url);
                if (savedTemplate) {
                    savedLinks.push(savedTemplate);
                }
            } catch (error) {
                console.warn('–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:', url);
            }
        }

        return savedLinks;
    }

    /**
     * –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –°–°–´–õ–ö–ò
     */
    autoSaveLinkOnInsert(text, url) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å—Å—ã–ª–∫–∞
        const existingIndex = this.sender.linkTemplates.findIndex(link =>
            link.text === text && link.url === url
        );

        if (existingIndex >= 0) {
            console.log('üîó Link template already exists, skipping auto-save');
            return null;
        }

        // –°–æ–∑–¥–∞–µ–º –∏–º—è —à–∞–±–ª–æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        const templateName = text.length > 20 ? text.substring(0, 20) + '...' : text;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        let uniqueName = templateName;
        let counter = 1;
        while (this.sender.linkTemplates.some(link => link.name === uniqueName)) {
            uniqueName = `${templateName} (${counter})`;
            counter++;
        }

        const template = {
            id: 'link_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
            name: uniqueName,
            text: text,
            url: url,
            created: new Date().toISOString(),
            usage_count: 0
        };

        this.sender.linkTemplates.push(template);
        this.saveLinkTemplates();

        console.log('üîó Auto-saved link template:', template.name);
        this.sender.addToLog(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —à–∞–±–ª–æ–Ω —Å—Å—ã–ª–∫–∏: ${template.name}`);

        return template;
    }

    /**
     * –†–ï–ù–î–ï–† –®–ê–ë–õ–û–ù–û–í –°–°–´–õ–û–ö –í –°–ï–õ–ï–ö–¢–ï
     */
    renderLinkTemplatesDropdown() {
        const linkTemplatesSelect = document.getElementById('linkTemplatesSelect');
        if (!linkTemplatesSelect) return;

        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–ø—Ü–∏–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π
        while (linkTemplatesSelect.options.length > 1) {
            linkTemplatesSelect.remove(1);
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é (—á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        const sortedTemplates = [...this.sender.linkTemplates].sort((a, b) => (b.usage_count || 0) - (a.usage_count || 0));

        sortedTemplates.forEach(template => {
            const option = document.createElement('option');
            option.value = template.id;
            const usage = template.usage_count ? ` (${template.usage_count}x)` : '';
            option.textContent = `üîó ${template.name}${usage}`;
            linkTemplatesSelect.appendChild(option);
        });

        console.log('üîó Link templates dropdown updated:', this.sender.linkTemplates.length, 'templates');
    }

    /**
     * –†–ï–ù–î–ï–† –®–ê–ë–õ–û–ù–û–í –°–°–´–õ–û–ö –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø
     */
    renderLinkTemplatesManagement() {
        const container = document.getElementById('linkTemplatesListContainer');
        if (!container) return;

        if (this.sender.linkTemplates.length === 0) {
            container.innerHTML = '<div style="color: #888; font-style: italic;">–®–∞–±–ª–æ–Ω—ã —Å—Å—ã–ª–æ–∫ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</div>';
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ—Å—Ç–∏
        const sortedTemplates = [...this.sender.linkTemplates].sort((a, b) =>
            (b.usage_count || 0) - (a.usage_count || 0) || new Date(b.created) - new Date(a.created)
        );

        const templatesHtml = sortedTemplates.map(template => `
            <div style="margin: 5px 0; padding: 8px; border: 1px solid #ddd; border-radius: 5px;">
                <strong>${template.name}</strong>${template.usage_count ? ` <small style="color: #666;">(${template.usage_count}x –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π)</small>` : ''}
                <br>
                <small style="color: #666;">
                    [<a href="${template.url}" target="_blank">${template.text}</a>]
                    <span style="color: #666;">‚Üí ${template.url}</span>
                </small>
                <button style="float: right; background: #17a2b8; color: white; border: none; border-radius: 3px; padding: 2px 6px; margin-left: 5px; font-size: 11px;" onclick="window.telegramSender.links.applyLinkTemplate('${template.id}')">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å</button>
                <button style="float: right; background: #dc3545; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 11px;" onclick="if(confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω —Å—Å—ã–ª–∫–∏?')) window.telegramSender.links.deleteLinkTemplate('${template.id}'); window.telegramSender.links.renderLinkTemplatesManagement();">‚ùå</button>
                <div style="clear: both;"></div>
            </div>
        `).join('');

        container.innerHTML = templatesHtml;
    }

    /**
     * –ü–û–ö–ê–ó WIZARD –í–°–¢–ê–í–ö–ò –°–°–´–õ–û–ö
     */
    showLinkInsertWizard() {
        const wizard = document.getElementById('linkWizard');
        if (wizard) {
            wizard.style.display = 'block';
        }
    }

    /**
     * –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–°–´–õ–û–ö
     */
    setupLinkEventListeners() {
        console.log('üîó Setting up link event listeners...');

        // –í—Å—Ç–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫
        const insertLinkBtn = document.getElementById('insertLinkBtn');
        if (insertLinkBtn) {
            insertLinkBtn.addEventListener('click', () => {
                this.showLinkInsertWizard();
            });
            console.log('‚úÖ Insert link button listener added');
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Å—Å—ã–ª–æ–∫
        const linkTemplatesSelect = document.getElementById('linkTemplatesSelect');
        if (linkTemplatesSelect) {
            linkTemplatesSelect.addEventListener('change', (e) => {
                const templateId = e.target.value;
                if (templateId) {
                    this.applyLinkTemplate(templateId);
                    e.target.value = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
                }
            });
            console.log('‚úÖ Link template select listener added');
        }

        console.log('‚úÖ Link event listeners setup completed');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TelegramLinks;
} else {
    // –î–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.TelegramLinks = TelegramLinks;
}
