/**
 * TelegramSender Buttons Module
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ inline –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
 */

class TelegramButtons {
    constructor(parent) {
        this.parent = parent; // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å TelegramSender

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.messageButtons = [];
    }

    /**
     * –î–û–ë–ê–í–õ–ï–ù–ò–ï INLINE –ö–ù–û–ü–ö–ò –ö –°–û–û–ë–©–ï–ù–ò–Æ
     */
    addMessageButton() {
        const textInput = document.getElementById('newButtonText');
        const urlInput = document.getElementById('newButtonUrl');
        const typeSelect = document.getElementById('newButtonType');

        const text = textInput?.value?.trim();
        const url = urlInput?.value?.trim();
        const type = typeSelect?.value || 'url';

        if (!text || !url) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ URL/Callback');
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è URL —Ç–∏–ø–∞
        if (type === 'url' && !url.match(/^https?:\/\/.+/i)) {
            alert('URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∫–Ω–æ–ø–æ–∫
        if (this.messageButtons.length >= 10) {
            alert('–ú–∞–∫—Å–∏–º—É–º 10 –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const exists = this.messageButtons.some(btn =>
            btn.text === text && btn.url === url && btn.type === type
        );

        if (exists) {
            alert('–¢–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
        const buttonData = {
            id: 'btn_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
            text: text,
            url: url,
            type: type
        };

        this.messageButtons.push(buttonData);

        // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        if (textInput) textInput.value = '';
        if (urlInput) urlInput.value = '';

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.renderMessageButtons();

        this.parent.addToLog(`–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: "${text}" (${type}: ${url})`);
    }

    /**
     * –û–ß–ò–°–¢–ö–ê –í–°–ï–• –ö–ù–û–ü–û–ö –°–û–û–ë–©–ï–ù–ò–Ø
     */
    clearMessageButtons() {
        if (this.messageButtons.length === 0) return;

        if (confirm(`–£–¥–∞–ª–∏—Ç—å –≤—Å–µ ${this.messageButtons.length} –∫–Ω–æ–ø–æ–∫?`)) {
            this.messageButtons = [];
            this.renderMessageButtons();
            this.parent.addToLog('–í—Å–µ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—â–µ–Ω—ã');
        }
    }

    /**
     * –£–î–ê–õ–ï–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–û–ô –ö–ù–û–ü–ö–ò
     */
    removeMessageButton(buttonId) {
        const index = this.messageButtons.findIndex(btn => btn.id === buttonId);
        if (index >= 0) {
            const removed = this.messageButtons.splice(index, 1)[0];
            this.renderMessageButtons();
            this.parent.addToLog(`–£–¥–∞–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: "${removed.text}"`);
        }
    }

    /**
     * –†–ï–ù–î–ï–† –°–ü–ò–°–ö–ê –ö–ù–û–ü–û–ö
     */
    renderMessageButtons() {
        const container = document.getElementById('buttonsList');
        if (!container) return;

        container.innerHTML = '';

        if (this.messageButtons.length === 0) {
            container.innerHTML = '<small style="color: var(--text-tertiary);">–ö–Ω–æ–ø–∫–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</small>';
            return;
        }

        this.messageButtons.forEach((button, index) => {
            const buttonEl = document.createElement('div');
            buttonEl.className = 'inline-button-item';
            buttonEl.style.cssText = `
                display: inline-flex;
                align-items: center;
                margin: 2px 4px;
                padding: 4px 8px;
                background: var(--accent-success);
                color: var(--text-inverse);
                border-radius: 4px;
                font-size: 11px;
                cursor: default;
                gap: 4px;
            `;

            buttonEl.innerHTML = `
                <span style="font-weight: 500;">${button.text}</span>
                <span style="opacity: 0.8; font-size: 9px;">(${button.type})</span>
                <button onclick="window.telegramSender.buttons.removeMessageButton('${button.id}')"
                        style="background: none; border: none; color: inherit; cursor: pointer; padding: 0; font-size: 14px; line-height: 1; margin-left: 4px;">√ó</button>
            `;

            container.appendChild(buttonEl);
        });
    }

    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –ö–ù–û–ü–û–ö –í –§–û–†–ú–ê–¢–ï INLINE_KEYBOARD –î–õ–Ø TELEGRAM API
     */
    getInlineKeyboardButtons() {
        if (this.messageButtons.length === 0) return null;

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤ —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –º–∞–∫—Å–∏–º—É–º
        const rows = [];
        let currentRow = [];

        this.messageButtons.forEach(button => {
            currentRow.push({
                text: button.text,
                [button.type === 'url' ? 'url' : 'callback_data']: button.url
            });

            // –ï—Å–ª–∏ —Ä—è–¥ –ø–æ–ª–Ω—ã–π –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            if (currentRow.length >= 2) {
                rows.push(currentRow);
                currentRow = [];
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–ø–æ–ª–Ω—ã–π —Ä—è–¥
        if (currentRow.length > 0) {
            rows.push(currentRow);
        }

        return rows;
    }

    /**
     * –°–û–•–†–ê–ù–ò–¢–¨ –ö–ù–û–ü–ö–ò –í LOCALSTORAGE
     */
    saveButtons() {
        try {
            localStorage.setItem('telegram_sender_buttons', JSON.stringify(this.messageButtons));
            console.log(`üíæ –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${this.messageButtons.length} —à—Ç.`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫:', error);
        }
    }

    /**
     * –ó–ê–ì–†–£–ó–ò–¢–¨ –ö–ù–û–ü–ö–ò –ò–ó LOCALSTORAGE
     */
    loadButtons() {
        try {
            const saved = localStorage.getItem('telegram_sender_buttons');
            if (saved) {
                this.messageButtons = JSON.parse(saved);
                console.log(`üìÇ –ö–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${this.messageButtons.length} —à—Ç.`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–æ–ø–æ–∫:', error);
        }
    }

    /**
     * –ü–û–õ–£–ß–ò–¢–¨ –ü–†–ï–í–¨–Æ –ö–õ–ê–í–ò–ê–¢–£–†–´ –í –¢–ï–ö–°–¢–û–í–û–ú –í–ò–î–ï
     */
    getKeyboardPreview() {
        if (this.messageButtons.length === 0) return '–ö–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã';

        let preview = 'üì± –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n\n';

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä—è–¥–∞–º
        let currentRow = [];
        this.messageButtons.forEach((btn, index) => {
            currentRow.push(`[${btn.text}]`);

            if (currentRow.length >= 2 || index === this.messageButtons.length - 1) {
                preview += currentRow.join('  ') + '\n';
                currentRow = [];
            }
        });

        if (currentRow.length > 0) {
            preview += currentRow.join('  ') + '\n';
        }

        return preview;
    }
}
