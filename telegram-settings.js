/**
 * TelegramSender Settings Module
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */

class TelegramSettings {
    constructor(parent) {
        this.parent = parent; // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å TelegramSender
        console.log('‚öôÔ∏è TelegramSettings module initialized');
    }

    /**
     * –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö –ó–í–£–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ò–ó localStorage
     */
    loadSoundSettings() {
        try {
            const saved = localStorage.getItem('telegram_sender_sound_settings');
            if (saved) {
                const savedSettings = JSON.parse(saved);
                this.parent.notificationSoundSettings = { ...this.parent.notificationSoundSettings, ...savedSettings };
                console.log('üîä Loaded sound settings:', this.parent.notificationSoundSettings);
            }
        } catch (error) {
            console.error('‚ùå Failed to load sound settings:', error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    }

    /**
     * –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö –ó–í–£–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –í localStorage
     */
    saveSoundSettings() {
        try {
            localStorage.setItem('telegram_sender_sound_settings', JSON.stringify(this.parent.notificationSoundSettings));
            console.log('üíæ Sound settings saved');
        } catch (error) {
            console.error('‚ùå Failed to save sound settings:', error);
        }
    }

    /**
     * –ó–ê–ì–†–£–ó–ö–ê –°–û–•–†–ê–ù–ï–ù–ù–û–ô –¢–ï–ú–´
     */
    loadSavedTheme() {
        const savedTheme = localStorage.getItem('telegram_sender_theme');
        this.parent.currentTheme = ['light', 'dark', 'gray'].includes(savedTheme) ? savedTheme : 'light';
        console.log('üé® Loaded theme:', this.parent.currentTheme);
    }

    /**
     * –°–û–•–†–ê–ù–ï–ù–ò–ï –¢–ï–ú–´
     */
    saveTheme(theme) {
        try {
            localStorage.setItem('telegram_sender_theme', theme);
            console.log('üíæ Theme saved:', theme);
        } catch (error) {
            console.error('‚ùå Failed to save theme:', error);
        }
    }

    /**
     * –ó–ê–ì–†–£–ó–ö–ê –®–ê–ë–õ–û–ù–û–í –°–û–û–ë–©–ï–ù–ò–ô –ò–ó localStorage
     */
    loadTemplates() {
        try {
            const saved = localStorage.getItem('telegram_sender_templates');
            if (saved) {
                this.parent.templates = JSON.parse(saved);
                console.log('üìã Loaded message templates:', this.parent.templates.length, 'templates');
            } else {
                this.parent.templates = [];
                console.log('üìã No message templates found');
            }
        } catch (error) {
            console.error('‚ùå Failed to load templates:', error);
            this.parent.templates = [];
        }
    }

    /**
     * –°–û–•–†–ê–ù–ï–ù–ò–ï –®–ê–ë–õ–û–ù–û–í –°–û–û–ë–©–ï–ù–ò–ô –í localStorage
     */
    saveTemplates() {
        try {
            localStorage.setItem('telegram_sender_templates', JSON.stringify(this.parent.templates));
            console.log('üíæ Message templates saved');
        } catch (error) {
            console.error('‚ùå Failed to save templates:', error);
        }
    }

    /**
     * –ó–ê–ì–†–£–ó–ö–ê –®–ê–ë–õ–û–ù–û–í –°–°–´–õ–û–ö –ò–ó localStorage
     */
    loadLinkTemplates() {
        try {
            const saved = localStorage.getItem('telegram_sender_link_templates');
            if (saved) {
                this.parent.linkTemplates = JSON.parse(saved);
                console.log('üîó Loaded link templates:', this.parent.linkTemplates.length, 'templates');
            } else {
                this.parent.linkTemplates = [];
                console.log('üîó No link templates found');
            }
        } catch (error) {
            console.error('‚ùå Failed to load link templates:', error);
            this.parent.linkTemplates = [];
        }
    }

    /**
     * –°–û–•–†–ê–ù–ï–ù–ò–ï –®–ê–ë–õ–û–ù–û–í –°–°–´–õ–û–ö –í localStorage
     */
    saveLinkTemplates() {
        try {
            localStorage.setItem('telegram_sender_link_templates', JSON.stringify(this.parent.linkTemplates));
            console.log('üíæ Link templates saved:', this.parent.linkTemplates.length, 'templates');
        } catch (error) {
            console.error('‚ùå Failed to save link templates:', error);
        }
    }

    /**
     * –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –°–û–•–†–ê–ù–ï–ù–ò–Ø
     */
    loadLinkAutoSave() {
        const saved = localStorage.getItem('telegram_sender_link_auto_save');
        this.parent.linkAutoSave = saved !== 'false'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ false
        console.log('üîó Loaded auto-save setting:', this.parent.linkAutoSave);
    }

    /**
     * –ó–ê–ì–†–£–ó–ö–ê –ò–°–¢–û–†–ò–ò –†–ê–°–°–´–õ–û–ö –ò–ó localStorage
     */
    loadBroadcastHistory() {
        try {
            const saved = localStorage.getItem('telegram_sender_history');
            if (saved) {
                this.parent.broadcastHistory = JSON.parse(saved);
                console.log('üìö Loaded broadcast history:', this.parent.broadcastHistory.length, 'items');
            } else {
                this.parent.broadcastHistory = [];
                console.log('üìö No broadcast history found');
            }
        } catch (error) {
            console.error('‚ùå Failed to load broadcast history:', error);
            this.parent.broadcastHistory = [];
        }
    }

    /**
     * –ó–ê–ì–†–£–ó–ö–ê –ò–°–¢–û–†–ò–ò –°–û–û–ë–©–ï–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
     */
    loadUserMessageHistory() {
        try {
            const saved = localStorage.getItem('telegram_sender_user_history');
            if (saved) {
                this.parent.userMessageHistory = JSON.parse(saved);
                console.log('üìö Loaded user message history');
            } else {
                this.parent.userMessageHistory = {};
                console.log('üìö No user message history found');
            }
        } catch (error) {
            console.error('‚ùå Failed to load user message history:', error);
            this.parent.userMessageHistory = {};
        }
    }

    /**
     * –°–û–•–†–ê–ù–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –†–ê–°–°–´–õ–û–ö –í localStorage
     */
    saveBroadcastHistory() {
        try {
            localStorage.setItem('telegram_sender_history', JSON.stringify(this.parent.broadcastHistory));
            console.log('üíæ Broadcast history saved');
        } catch (error) {
            console.error('‚ùå Failed to save broadcast history:', error);
        }
    }

    /**
     * –°–û–•–†–ê–ù–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –°–û–û–ë–©–ï–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
     */
    saveUserMessageHistory() {
        try {
            localStorage.setItem('telegram_sender_user_history', JSON.stringify(this.parent.userMessageHistory));
            console.log('üíæ User message history saved');
        } catch (error) {
            console.error('‚ùå Failed to save user message history:', error);
        }
    }

    /**
     * –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• –∏–∑ —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π localStorage
     */
    migrateLegacyData() {
        console.log('üîÑ Checking for legacy data migration...');

        let migratedCount = 0;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
        const legacyKeys = {
            // –°—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
            'tg_sender_templates': 'telegram_sender_templates',
            'telegram_sender_history_v1': 'telegram_sender_history',
            'sound_settings': 'telegram_sender_sound_settings',
            'tg_sender_link_templates': 'telegram_sender_link_templates'
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç–∞—Ä—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        for (const [oldKey, newKey] of Object.entries(legacyKeys)) {
            try {
                const oldData = localStorage.getItem(oldKey);
                if (oldData) {
                    const parsedOldData = JSON.parse(oldData);
                    const newData = localStorage.getItem(newKey);

                    // –ï—Å–ª–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ –∏–ª–∏ —Å—Ç–∞—Ä—ã–µ –µ—Å—Ç—å, –Ω–æ –Ω–æ–≤—ã—Ö –Ω–µ—Ç
                    if (!newData || JSON.parse(newData).length === 0) {
                        console.log(`üîÑ Migrating ${oldKey} to ${newKey}`);
                        localStorage.setItem(newKey, oldData);
                        localStorage.removeItem(oldKey); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
                        migratedCount++;

                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
                        if (newKey === 'telegram_sender_templates') {
                            this.parent.templates = parsedOldData;
                            this.saveTemplates();
                        } else if (newKey === 'telegram_sender_sound_settings') {
                            this.parent.notificationSoundSettings = { ...this.parent.notificationSoundSettings, ...parsedOldData };
                            this.saveSoundSettings();
                        } else if (newKey === 'telegram_sender_history') {
                            this.parent.broadcastHistory = parsedOldData;
                            this.saveBroadcastHistory();
                        } else if (newKey === 'telegram_sender_link_templates') {
                            this.parent.linkTemplates = parsedOldData;
                            this.saveLinkTemplates();
                        }
                    }
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è Failed to migrate ${oldKey}:`, error);
            }
        }

        if (migratedCount > 0) {
            console.log(`‚úÖ Successfully migrated ${migratedCount} data entries`);
            this.parent.addToLog(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${migratedCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏`);
        } else {
            console.log('‚úÖ No migration needed - data is up to date');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∫—É —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        localStorage.setItem('telegram_sender_migrated_v2', 'true');

        return migratedCount;
    }
}
