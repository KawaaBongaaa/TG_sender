/**
 * TelegramSender Users Module
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
 */

class TelegramUsers {
    constructor(parent) {
        this.parent = parent; // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å TelegramSender
    }

    /**
     * –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ò–ó GOOGLE SHEETS
     */
    async loadUsersData() {
        this.parent.showStatus('–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...', 'info');

        const config = window.CONFIG;

        if (!config || !config.SHEET_ID) {
            throw new Error('CONFIG.SHEET_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ config.js');
        }

        try {
            // –ó–∞–ø—Ä–æ—Å –∫ Google Sheets API (CSV —Ñ–æ—Ä–º–∞—Ç)
            let url;
            if (config.SHEET_ID.startsWith('2PACX-')) {
                // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                url = `https://docs.google.com/spreadsheets/d/e/${config.SHEET_ID}/pub?gid=0&single=true&output=csv`;
            } else {
                // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ–±—ã—á–Ω—ã–π sheet ID)
                url = `https://docs.google.com/spreadsheets/d/${config.SHEET_ID}/gviz/tq?tqx=out:csv`;
            }

            console.log('üìä Loading from Google Sheets:', url);

            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'text/csv'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const csvText = await response.text();
            console.log('üìä Raw CSV received, length:', csvText.length);

            // –ü–∞—Ä—Å–∏–º CSV
            this.parent.usersData = this.parseCSV(csvText);

            // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            this.parent.usersData = this.parent.usersData.filter(user =>
                user.user_id &&
                user.user_id.toString().trim() !== ''
            );

            console.log('‚úÖ Loaded users data:', this.parent.usersData.length, 'valid records');

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.applyFilters();
            this.updateUsersCount();

            this.parent.showStatus(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.parent.usersData.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, 'success');

        } catch (error) {
            console.error('‚ùå Failed to load users data:', error);
            this.parent.showStatus(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`, 'error');
            throw error;
        }
    }

    /**
     * –ü–∞—Ä—Å–µ—Ä CSV —Ç–µ–∫—Å—Ç–∞ –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
     */
    parseCSV(csvText) {
        const lines = csvText.trim().split('\n');
        if (lines.length < 2) {
            throw new Error('CSV —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–Ω—å—à–µ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫');
        }

        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const headers = lines[0].split(',').map(h => h.replace(/"/g, '').trim().toLowerCase());

        console.log('üìä CSV headers found:', headers);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        const requiredColumns = ['user_id'];
        const missingColumns = requiredColumns.filter(col => !headers.includes(col));

        if (missingColumns.length > 0) {
            throw new Error(`–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${missingColumns.join(', ')}`);
        }

        // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        const users = [];
        for (let i = 1; i < lines.length; i++) {
            const line = lines[i].trim();
            if (!line) continue;

            const values = this.parseCSVLine(line);

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = {};
            headers.forEach((header, index) => {
                user[header] = values[index]?.replace(/"/g, '').trim() || '';
            });

            users.push(user);
        }

        return users;
    }

    /**
     * –ü–∞—Ä—Å–µ—Ä –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ CSV
     */
    parseCSVLine(line) {
        const result = [];
        let current = '';
        let inQuotes = false;

        for (let i = 0; i < line.length; i++) {
            const char = line[i];

            if (char === '"') {
                inQuotes = !inQuotes;
            } else if (char === ',' && !inQuotes) {
                result.push(current);
                current = '';
            } else {
                current += char;
            }
        }

        result.push(current);
        return result;
    }

    /**
     * –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –§–ò–õ–¨–¢–†–û–í –ö –î–ê–ù–ù–´–ú
     */
    applyFilters() {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞
        const searchFilter = (document.getElementById('searchFilter')?.value || '').toLowerCase();

        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        const selectedStatuses = [];
        const statusCheckboxes = ['statusTrial', 'statusNewSub', 'statusCanceled', 'statusKicked'];
        statusCheckboxes.forEach(statusId => {
            const checkbox = document.getElementById(statusId);
            if (checkbox && checkbox.checked) {
                selectedStatuses.push(statusId.replace('status', '').toLowerCase());
            }
        });

        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏
        const selectedLanguages = [];
        const languageCheckboxes = ['languageEn', 'languageRu', 'languageDe', 'languageFr', 'languageEs', 'languageIt', 'languagePt', 'languagePl', 'languageTr', 'languageZh', 'languageJa', 'languageKo', 'languageAr', 'languageHi', 'languageOther'];
        languageCheckboxes.forEach(langId => {
            const checkbox = document.getElementById(langId);
            if (checkbox && checkbox.checked) {
                const lang = langId.replace('language', '').toLowerCase();
                selectedLanguages.push(lang === 'en' ? 'english' : lang === 'ru' ? 'russian' : lang === 'de' ? 'german' : lang === 'fr' ? 'french' : lang === 'es' ? 'spanish' : lang === 'it' ? 'italian' : lang === 'pt' ? 'portuguese' : lang === 'pl' ? 'polish' : lang === 'tr' ? 'turkish' : lang === 'zh' ? 'chinese' : lang === 'ja' ? 'japanese' : lang === 'ko' ? 'korean' : lang === 'ar' ? 'arabic' : lang === 'hi' ? 'hindi' : 'other');
            }
        });

        console.log('üîç Applying filters:', {
            searchFilter,
            selectedStatuses,
            selectedLanguages,
            totalUsersInDB: this.parent.usersData.length
        });

        this.parent.filteredUsers = this.parent.usersData.filter(user => {
            // –¢–ï–ö–°–¢–û–í–´–ô –ü–û–ò–°–ö
            if (searchFilter) {
                const searchText = [
                    user.user_id,
                    user.username || '',
                    user.first_name || '',
                    user.last_name || '',
                    user.tag || '',
                    user.status || ''
                ].join(' ').toLowerCase();

                if (!searchText.includes(searchFilter)) {
                    return false;
                }
            }

            // –§–ò–õ–¨–¢–† –ü–û –°–¢–ê–¢–£–°–£ - –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Å—Ç–∞—Ç—É—Å—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            if (selectedStatuses.length > 0) {
                const userStatus = (user.status || 'unknown').toLowerCase();
                let statusMatches = false;

                for (const selectedStatus of selectedStatuses) {
                    if (selectedStatus === 'trial' && (userStatus.includes('trial') || userStatus === 'unknown')) {
                        statusMatches = true;
                        break;
                    }
                    if (selectedStatus === 'newsub' && userStatus.includes('new')) {
                        statusMatches = true;
                        break;
                    }
                    if (selectedStatus === 'canceled' && userStatus.includes('cancel')) {
                        statusMatches = true;
                        break;
                    }
                    if (selectedStatus === 'kicked' && userStatus.includes('kick')) {
                        statusMatches = true;
                        break;
                    }
                }

                if (!statusMatches) {
                    return false;
                }
            }

            // –§–ò–õ–¨–¢–† –ü–û –Ø–ó–´–ö–£ - –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —è–∑—ã–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            if (selectedLanguages.length > 0) {
                const userLang = (user.language || '').toLowerCase();
                let langMatches = false;

                for (const selectedLang of selectedLanguages) {
                    if (selectedLang === 'other' && (!userLang || userLang === '')) {
                        langMatches = true;
                        break;
                    }
                    if (userLang.includes(selectedLang.substring(0, 2))) {
                        langMatches = true;
                        break;
                    }
                    if (selectedLang === userLang || userLang.startsWith(selectedLang.substring(0, 2))) {
                        langMatches = true;
                        break;
                    }
                }

                if (!langMatches) {
                    return false;
                }
            }

            return true;
        });

        console.log('üîç Filtered users:', this.parent.filteredUsers.length, 'of', this.parent.usersData.length);

        // –û–ë–ù–û–í–õ–Ø–ï–ú –≠–õ–ï–ú–ï–ù–¢–´
        this.renderUsersTable();
        this.updateUsersCount();

        // –õ–û–ì –§–ò–õ–¨–¢–†–ê–¶–ò–ò
        const filterSummary = [];
        if (searchFilter) filterSummary.push(`–ø–æ–∏—Å–∫: "${searchFilter}"`);
        if (selectedStatuses.length > 0) filterSummary.push(`—Å—Ç–∞—Ç—É—Å—ã: ${selectedStatuses.join(', ')}`);
        if (selectedLanguages.length > 0) filterSummary.push(`—è–∑—ã–∫–∏: ${selectedLanguages.join(', ')}`);

        this.parent.addToLog(`–§–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω${filterSummary.length > 0 ? ' (' + filterSummary.join(', ') + ')' : ''} - –Ω–∞–π–¥–µ–Ω–æ ${this.parent.filteredUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }

    /**
     * –†–ï–ù–î–ï–† –¢–ê–ë–õ–ò–¶–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
     */
    renderUsersTable() {
        const tableBody = document.getElementById('usersTableBody');
        if (!tableBody) return;

        console.log(`üìã RENDERING TABLE: ${this.parent.filteredUsers.length} users`);

        if (this.parent.filteredUsers.length === 0) {
            tableBody.innerHTML = `
                <tr>
                    <td colspan="12" style="text-align: center; padding: 40px; color: #6c757d;">
                        üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫.
                    </td>
                </tr>
            `;
            this.updateUsersCount();
            return;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (–≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
        const rows = this.parent.filteredUsers.map(user => {
            const isSelected = this.parent.selectedUsers.has(user.user_id);
            const checkboxChecked = isSelected ? 'checked' : '';

            return `
                <tr data-user-id="${user.user_id}" class="user-row">
                    <td style="text-align: center;">
                        <input type="checkbox" class="user-checkbox" ${checkboxChecked} data-user-id="${user.user_id}">
                    </td>
                    <td>
                        <code style="background:#f8f9fa;color:#000;padding:1px 4px;border-radius:2px;font-size:11px;user-select:none;">${user.user_id}</code>
                    </td>
                    <td style="color: #000;">${this.parent.messaging.getFirstNameDisplay(user)}</td>
                    <td style="color: #000;">${this.parent.messaging.getLastNameDisplay(user)}</td>
                    <td style="color: #2563eb;">
                        ${user.username ? `<a href="https://t.me/${user.username}" target="_blank">@${user.username}</a>` : '‚Äî'}
                    </td>
                    <td>
                        <span class="status-pill" style="color: #000 !important;">
                            ${user.status || 'unknown'}
                        </span>
                    </td>
                    <td style="text-align: center;">
                        <span style="background: #e3f2fd; color: #1976d2; padding: 2px 6px; border-radius: 8px; font-size: 10px; font-weight: bold;">
                            ${user.language || '‚Äî'}
                        </span>
                    </td>
                    <td style="text-align: center;">
                        <strong style="color: #dc3545; background: #f8d7da; padding: 2px 6px; border-radius: 4px; display: inline-block; font-weight: bold;">${getPremiumDisplay(user)}</strong>
                    </td>
                    <td style="text-align: center;">
                        <strong style="color: #28a745; background: #d4edda; padding: 2px 6px; border-radius: 4px; display: inline-block;">${getTrafficSourceDisplay(user)}</strong>
                    </td>
                    <td style="text-align: center;">
                        <span style="background: #fff3cd; color: #856404; padding: 2px 6px; border-radius: 8px; font-size: 10px; font-weight: bold; border: 2px solid #ff9900;">
                            <strong>${getTrialCallsDisplay(user)}</strong>
                        </span>
                    </td>
                    <td style="text-align: center;">
                        ${getTagDisplay(user)}
                    </td>
                    <td style="text-align: center;">
                        <button onclick="showUserMessageHistory('${user.user_id}')" style="font-size: 11px; padding: 2px 4px; border: 1px solid #6c757d; border-radius: 3px; cursor: pointer; background: #f8f9fa; margin-right: 5px;">üìÑ –ò—Å—Ç–æ—Ä–∏—è</button>
                        <span style="color: #666; font-size: 11px; display: block; margin-top: 2px;">
                            ${this.parent.messaging.getLastSentDisplay(user).replace(/<[^>]*>/g, '').trim()}
                        </span>
                    </td>
                </tr>
            `;
        }).join('');

        tableBody.innerHTML = rows;

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
        this.setupUserCheckboxes();

        this.updateUsersCount();
        console.log('‚úÖ Users table rendered successfully');
    }

    /**
     * –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ß–ï–ö–ë–û–ö–°–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
     */
    setupUserCheckboxes() {
        // –ú–∞—Å—Ç–µ—Ä-—á–µ–∫–±–æ–∫—Å
        const masterCheckbox = document.getElementById('masterUserCheckbox');
        if (masterCheckbox) {
            masterCheckbox.addEventListener('change', (e) => {
                const isChecked = e.target.checked;
                this.toggleAllUsersSelection(isChecked);
            });
        }

        // –û—Ç–¥–µ–ª—å–Ω—ã–µ —á–µ–∫–±–æ–∫—Å—ã
        document.querySelectorAll('.user-checkbox').forEach(cb => {
            cb.addEventListener('change', (e) => {
                const userId = e.target.dataset.userId;
                const isChecked = e.target.checked;

                if (isChecked) {
                    this.parent.selectedUsers.add(userId);
                } else {
                    this.parent.selectedUsers.delete(userId);
                }

                this.updateSelectedCount();
            });
        });
    }

    /**
     * –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ß–ï–¢–ß–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
     */
    updateUsersCount() {
        const usersCountElements = [
            document.querySelector('#usersCount span'),
            document.getElementById('usersCountBadge')
        ];

        usersCountElements.forEach(el => {
            if (el) {
                if (el.id === 'usersCountBadge') {
                    el.textContent = `üë• ${this.parent.filteredUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
                } else {
                    el.textContent = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.parent.filteredUsers.length}`;
                }
            }
        });

        const selectedElements = [
            document.getElementById('usersSelectedInfo'),
            document.getElementById('usersSelectedBadge')
        ];

        selectedElements.forEach(el => {
            if (el) {
                if (el.id === 'usersSelectedBadge') {
                    el.textContent = `‚úÖ –í—ã–±—Ä–∞–Ω–æ: ${this.parent.selectedUsers.size}`;
                } else {
                    el.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${this.parent.selectedUsers.size}`;
                }
            }
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    updateSelectedCount() {
        const selectedInfoEl = document.getElementById('usersSelectedInfo');
        if (selectedInfoEl) {
            selectedInfoEl.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${this.parent.selectedUsers.size}`;
        }

        if (this.parent.selectedUsers.size > 0) {
            this.parent.addToLog(`–í—ã–±—Ä–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.parent.selectedUsers.size}`);
        }
    }

    /**
     * –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –í–´–ë–û–†–ê –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
     */
    toggleAllUsersSelection(select = true) {
        const checkboxes = document.querySelectorAll('.user-checkbox');
        const masterCheckbox = document.getElementById('masterUserCheckbox');

        if (select) {
            this.parent.selectedUsers.clear();
            checkboxes.forEach(cb => {
                this.parent.selectedUsers.add(cb.dataset.userId);
                cb.checked = true;
            });
        } else {
            this.parent.selectedUsers.clear();
            checkboxes.forEach(cb => {
                cb.checked = false;
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä-—á–µ–∫–±–æ–∫—Å
        if (masterCheckbox) {
            masterCheckbox.checked = select;
        }

        this.updateSelectedCount();
        this.parent.addToLog(select ? '–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' : '–°–Ω—è—Ç–∞ –≤—ã–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }

    /**
     * –°–û–†–¢–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ü–û –ü–û–õ–Æ
     */
    sortUsersBy(field) {
        if (!this.parent.currentSort || this.parent.currentSort.field !== field) {
            this.parent.currentSort = { field, direction: 'asc' };
        } else if (this.parent.currentSort.direction === 'asc') {
            this.parent.currentSort.direction = 'desc';
        } else {
            this.parent.currentSort = null;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        this.updateSortIndicators();

        // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        this.renderUsersTable();

        console.log('üîÑ Sort users by:', field, this.parent.currentSort?.direction);
        this.parent.addToLog(`–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ: ${field} ${this.parent.currentSort?.direction || '—Å–±—Ä–æ—à–µ–Ω–∞'}`);
    }

    /**
     * –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–û–í –°–û–†–¢–ò–†–û–í–ö–ò
     */
    updateSortIndicators() {
        // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —É–±—Ä–∞–ª –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        console.log('üîÑ Sort indicators updated');
    }

    /**
     * –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
     */
    async reloadUsersData() {
        try {
            await this.loadUsersData();
            this.parent.showStatus('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
        } catch (error) {
            this.parent.showStatus('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', 'error');
        }
    }

    /**
     * –ù–ê–°–¢–†–û–ô–ö–ê –°–û–†–¢–ò–†–û–í–ö–ò –¢–ê–ë–õ–ò–¶–´
     */
    setupTableSorting() {
        console.log('üîß Setting up table sorting...');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
        document.querySelectorAll('#usersTable th.sortable').forEach(th => {
            th.addEventListener('click', () => {
                const field = th.dataset.sort;
                if (field) {
                    this.sortUsersBy(field);
                }
            });
        });

        console.log('‚úÖ Table sorting setup completed');
    }

    /**
     * –û–ë–†–ê–ë–û–¢–ö–ê –ò–ú–ü–û–†–¢–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
     */
    handleImportUsers(event) {
        const file = event.target.files[0];
        if (!file) return;

        if (file.type !== 'text/csv' && !file.name.endsWith('.csv')) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª!');
            return;
        }

        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const csvText = e.target.result;
                const importedUsers = this.parseCSV(csvText);

                this.parent.usersData = [...this.parent.usersData, ...importedUsers];
                this.applyFilters();

                this.parent.addToLog(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
                alert(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!`);

                // –°–±—Ä–æ—Å input
                event.target.value = '';
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
                alert('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ' + error.message);
            }
        };

        reader.readAsText(file);
    }

    /**
     * –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –§–ò–õ–¨–¢–†–û–í
     */
    setupFilterEventListeners() {
        console.log('üîç Setting up filter event listeners...');

        // –û–±—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        const filters = [
            'searchFilter', 'tagFilter', // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            'statusTrial', 'statusNewSub', 'statusCanceled', 'statusKicked', 'invertStatus', // –°—Ç–∞—Ç—É—Å—ã
            'languageEn', 'languageRu', 'languageDe', 'languageFr', 'languageEs', 'languageIt',
            'languagePt', 'languagePl', 'languageTr', 'languageZh', 'languageJa', 'languageKo',
            'languageAr', 'languageHi', 'languageOther' // –Ø–∑—ã–∫–∏
        ];

        filters.forEach(filterId => {
            const element = document.getElementById(filterId);
            if (element) {
                element.addEventListener('input', () => {
                    this.applyFilters();
                    this.parent.addToLog(`–§–∏–ª—å—Ç—Ä "${filterId}" –∏–∑–º–µ–Ω–µ–Ω`);
                });

                element.addEventListener('change', () => {
                    this.applyFilters();
                    this.parent.addToLog(`–§–∏–ª—å—Ç—Ä "${filterId}" –∏–∑–º–µ–Ω–µ–Ω`);
                });
            }
        });

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        const filterButtons = ['resetFilters', 'selectAllStatuses'];
        filterButtons.forEach(btnId => {
            const button = document.getElementById(btnId);
            if (button) {
                button.addEventListener('click', (e) => {
                    e.preventDefault();

                    if (btnId === 'resetFilters') {
                        this.resetFilters();
                    } else if (btnId === 'selectAllStatuses') {
                        this.selectAllStatuses();
                    }
                });
            }
        });

        console.log('‚úÖ Filter event listeners setup completed');
    }

    /**
     * –°–ë–†–û–° –í–°–ï–• –§–ò–õ–¨–¢–†–û–í
     */
    resetFilters() {
        // –°–±—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const textFilters = ['searchFilter', 'tagFilter'];
        textFilters.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.value = '';
            }
        });

        // –°–±—Ä–æ—Å —á–µ–∫–±–æ–∫—Å–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
        const statusCheckboxes = ['statusTrial', 'statusNewSub', 'statusCanceled', 'statusKicked', 'invertStatus'];
        statusCheckboxes.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.checked = false;
            }
        });

        // –°–±—Ä–æ—Å —á–µ–∫–±–æ–∫—Å–æ–≤ —è–∑—ã–∫–æ–≤
        const languageCheckboxes = ['languageEn', 'languageRu', 'languageDe', 'languageFr', 'languageEs', 'languageIt', 'languagePt', 'languagePl', 'languageTr', 'languageZh', 'languageJa', 'languageKo', 'languageAr', 'languageHi', 'languageOther'];
        languageCheckboxes.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.checked = false;
            }
        });

        this.applyFilters();
        this.parent.addToLog('–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã');
        alert('–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã!');
    }

    /**
     * –í–´–ë–û–† –í–°–ï–• –°–¢–ê–¢–£–°–û–í
     */
    selectAllStatuses() {
        const statusCheckboxes = ['statusTrial', 'statusNewSub', 'statusCanceled', 'statusKicked'];
        const isCurrentlyAllSelected = statusCheckboxes.every(id => {
            const element = document.getElementById(id);
            return element && element.checked;
        });

        statusCheckboxes.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.checked = !isCurrentlyAllSelected;
            }
        });

        this.applyFilters();
        this.parent.addToLog(`${isCurrentlyAllSelected ? '–°–Ω—è—Ç–∞' : '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'} –≤—ã–±–æ—Ä–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤`);
    }

    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –í–´–ë–†–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
     */
    getSelectedUsers() {
        const selectedUsers = [];
        for (const userId of this.parent.selectedUsers) {
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID —Å—Ä–µ–¥–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const user = this.parent.filteredUsers.find(u => u.user_id == userId);
            if (user) {
                selectedUsers.push(user);
            }
        }
        return selectedUsers;
    }
}
