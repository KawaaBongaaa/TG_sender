/* =========================================== */
/* Telegram Mini App –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π */
/* –ü–æ–ª–Ω–æ—Å—Ç—å—é –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —á–∏—Å—Ç–æ–º JavaScript */
/* GitHub Pages compatible */
/* =========================================== */

class TelegramSender {
    constructor() {
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.usersData = []; // –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ Google Sheets
        this.filteredUsers = []; // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        this.isAdmin = false; // –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        this.isSending = false; // –§–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
        this.sendProgress = 0; // –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ (0-100)
        this.sendResults = []; // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏: {user_id, success, error}

        // –ù–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏ - –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è
        this.currentBot = null; // –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±–æ—Ç
        this.currentSheet = null; // –¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º
        this.currentTheme = 'light'; // 'light', 'gray', 'dark'

        // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
        this.dom = {};

        // –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        this.templates = []; // –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π

        // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫
        this.sendSchedule = null; // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        this.messageTimeout = 1000; // –¢–∞–π–º–∞—É—Ç –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —Å–µ–∫)
        this.currentTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone; // –¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

        // –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.userMessageHistory = {}; // {user_id: [{timestamp, message, status}, ...]}

        // –®–∞–±–ª–æ–Ω—ã —Å—Å—ã–ª–æ–∫
        this.linkTemplates = []; // –®–∞–±–ª–æ–Ω—ã —Å—Å—ã–ª–æ–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≤—Å—Ç–∞–≤–∫–∏

        /* –û–°–ù–û–í–ù–ê–Ø –ù–û–í–ò–ó–ù–ê: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –°–°–´–õ–û–ö –ò–ó –°–û–û–ë–©–ï–ù–ò–ô */
        this.linkAutoSave = true; // –†–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫

        // –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        this.selectedUsers = new Set();

        // –¢–µ–∫—É—â–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        this.currentSort = null;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram SDK
        this.isTelegramSDKReady = false;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage –ü–ï–†–ï–î –∑–∞–≥—Ä—É–∑–∫–æ–π –º–æ–¥—É–ª–µ–π TelegramSettings (–Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        this.settings = new TelegramSettings(this);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
        this.messaging = new TelegramMessaging(this);
        this.users = new TelegramUsers(this);
        this.notifications = new TelegramNotifications(this);
        this.scheduler = new TelegramScheduler(this);
        this.botsModule = new TelegramBots(this);
        this.templatesModule = new TelegramTemplates(this);
        this.links = new TelegramLinks(this);
        this.buttons = new TelegramButtons(this);
        this.storage = new TelegramStorage(this);

        // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º - —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–¥—É–ª—å –±–æ—Ç–æ–≤ –∫–∞–∫ this.bots
        this.bots = this.botsModule;

        console.log('üöÄ TelegramSender instance created with modules');
    }

    /**
     * –û–°–ù–û–í–ù–ê–Ø –ù–ê–ß–ê–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async init() {
        console.log('üöÄ Initializing Telegram Sender WebApp...');

        try {
            this.storage.loadTemplates();
            this.storage.loadLinkTemplates();
            this.storage.loadBots();
            this.storage.loadBroadcastHistory();
            this.storage.loadUserMessageHistory();
            this.storage.loadSoundSettings();
            this.storage.loadSavedTheme();
            this.storage.loadLinkAutoSave();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            this.buttons.loadButtons();

            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            this.storage.migrateDataOnStartup();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp SDK
            await this.checkTelegramSDK();
            await this.checkAdminAccess();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await this.initializeUI();

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –±–æ—Ç–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã (—Ç–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
            this.restoreSavedSelections();

        } catch (error) {
            console.error('‚ùå Initialization failed:', error);
            this.showErrorScreen(error.message);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram SDK
     */
    async checkTelegramSDK() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω SDK
        if (this.isTelegramSDKReady) {
            console.log('‚úÖ Telegram SDK already initialized');
            return;
        }

        return new Promise((resolve, reject) => {
            if (typeof window.Telegram !== 'undefined' && window.Telegram.WebApp) {
                // SDK —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
                console.log('‚úÖ Telegram SDK available');

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebApp —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                if (!this.isTelegramSDKReady) {
                    window.Telegram.WebApp.ready();
                    window.Telegram.WebApp.expand();

                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
                    this.applyTelegramTheme();
                    this.isTelegramSDKReady = true;
                }

                resolve();
                return;
            }

            // –ú–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É SDK
            const timeout = setTimeout(() => {
                reject(new Error('Telegram SDK –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.'));
            }, 3000);

            // –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 100–º—Å
            const interval = setInterval(() => {
                if (typeof window.Telegram !== 'undefined' && window.Telegram.WebApp) {
                    clearTimeout(timeout);
                    clearInterval(interval);

                    console.log('‚úÖ Telegram SDK loaded');

                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebApp
                    window.Telegram.WebApp.ready();
                    window.Telegram.WebApp.expand();

                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
                    this.applyTelegramTheme();
                    this.isTelegramSDKReady = true;

                    resolve();
                }
            }, 100);
        });
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∏–∑ Telegram WebApp
     */
    applyTelegramTheme() {
        const tg = window.Telegram.WebApp;
        if (!tg.themeParams) return;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—ë–º–Ω—É—é —Ç–µ–º—É –µ—Å–ª–∏ –≤ Telegram —Å—Ç–æ–∏—Ç —Ç—ë–º–Ω–∞—è
        if (tg.colorScheme === 'dark' || tg.themeParams.bg_color) {
            document.body.setAttribute('data-theme', 'dark');
            console.log('üåô Applied dark theme from Telegram');
        } else {
            document.body.setAttribute('data-theme', 'light');
            console.log('‚òÄÔ∏è Applied light theme from Telegram');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    checkAdminAccess() {
        return new Promise((resolve, reject) => {
            const tg = window.Telegram.WebApp;
            const config = window.CONFIG;

            if (!config || !config.ADMIN_ID) {
                reject(new Error('CONFIG.ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ config.js'));
                return;
            }

            // üö® DEVMODE: –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ Telegram SDK
            if (config.ADMIN_ID !== "PLACEHOLDER_ADMIN_ID") {
                this.isAdmin = true;
                console.log('‚úÖ Dev mode: Admin access granted (config –≤—ã–≥–ª—è–¥–∏—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º)');
                console.log('üîç –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram SDK!');
                resolve();
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const currentUserId = tg.initDataUnsafe?.user?.id?.toString();

            console.log('üîç Checking admin access:', {
                expected: config.ADMIN_ID,
                current: currentUserId,
                isMatch: currentUserId === config.ADMIN_ID
            });

            if (currentUserId === config.ADMIN_ID) {
                this.isAdmin = true;
                console.log('‚úÖ Admin access granted');
                resolve();
            } else {
                reject(new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.'));
            }
        });
    }

    /**
     * –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –ò–ù–¢–ï–†–§–ï–ô–°–ê
     */
    initializeUI() {
        console.log('üé® Initializing UI...');

        // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
        this.dom = {
            app: document.querySelector('.app-container'),
            loading: document.querySelector('.loading-screen'),
            error: document.querySelector('.access-denied-screen'),
            main: document.querySelector('.main-app'),
            usersTable: document.querySelector('.users-table tbody'),
            status: document.querySelector('.status-indicator')
        };

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();

        // –†–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏—Å–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
        this.renderTemplatesDropdown();
        this.renderLinkTemplatesDropdown();

        // –†–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü
        this.renderBotsDropdown();
        this.renderSheetsDropdown();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.showMainApp();
    }

    /**
     * –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô
     */
    setupEventListeners() {
        console.log('üîß Setting up event listeners...');

        // –ù–û–í–´–ï –ü–†–û–°–¢–´–ï –≠–õ–ï–ú–ï–ù–¢–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –∫–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–±—Ä–∞–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        const sendBtnSimple = document.getElementById('sendBtn');
        const messageInput = document.getElementById('messageInput');

        console.log('Test elements found:', { sendBtnSimple, messageInput });

        if (sendBtnSimple) {
            sendBtnSimple.addEventListener('click', () => {
                console.log('üì§ Simple send button clicked');
                this.addToLog('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
                this.messaging.startSimpleBroadcast();
            });
            console.log('‚úÖ Simple send button listener added');
        }

        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –í–°–ï–• –ö–ù–û–ü–û–ö –ò–ó HTML
        this.setupAllButtonListeners();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏ –∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
        this.botsModule.setupBotEventListeners();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —Ç–∞–±–ª–∏—Ü—ã
        this.users.setupTableSorting();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ç–µ–º
        this.setupThemeSwitcherListeners();

        // –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π - —Ç–µ–ø–µ—Ä—å localStorage –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ –º–æ–¥—É–ª—è
        this.templatesModule.setupTemplateEventListeners();

        // –§–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.users.setupFilterEventListeners();

        // –°—Å—ã–ª–∫–∏ (–ø–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –≤—ã–∑–æ–≤–∞–º–∏)
        this.links.setupLinkEventListeners();

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ addLinkTemplate –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.addLinkTemplate = this.links.addLinkTemplate.bind(this.links);

        console.log('üéØ Complex event listeners setup completed');
    }

    /**
     * –§–£–ù–ö–¶–ò–Ø –ó–ê–ö–†–´–¢–ò–Ø –í–°–ï–• –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù (–ï–î–ò–ù–ê–Ø –õ–û–ì–ò–ö–ê)
     */
    closeAllModals() {
        console.log('üéØ Closing all modals...');

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –û–ë–©–ò–ô backdrop (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å–µ–º–∏ –æ–∫–Ω–∞–º–∏)
        const modalBackdrop = document.getElementById('modalBackdrop');
        if (modalBackdrop) {
            modalBackdrop.classList.remove('show');
            modalBackdrop.style.display = 'none';
            console.log('‚úÖ Modal backdrop closed');
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ modal –¥–∏–∞–ª–æ–≥–∏
        const modals = [
            '#sheetsWizard', '#templateWizard', '#soundSettingsWizard', '#linkWizard',
            '#botsWizard', '#userHistoryWizard' // –î–æ–±–∞–≤–ª–µ–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        ];
        modals.forEach(modalId => {
            const modal = document.querySelector(modalId);
            if (modal) {
                modal.style.display = 'none';
                console.log(`‚úÖ ${modalId} closed`);
            }
        });
    }

    /**
     * –ï–î–ò–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–ö–ê–ó–ê –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù (—Å backdrop)
     */
    showModalWithBackdrop(wizardId) {
        console.log(`üéØ Showing modal: ${wizardId}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º backdrop
        const modalBackdrop = document.getElementById('modalBackdrop');
        if (modalBackdrop) {
            modalBackdrop.classList.add('show');
            modalBackdrop.style.display = 'flex';
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const wizard = document.getElementById(wizardId);
        if (wizard) {
            wizard.style.display = 'block';
            console.log(`‚úÖ ${wizardId} shown`);
        }
    }

    /**
     * –ï–î–ò–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–ö–†–´–¢–ò–Ø –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù (—Å backdrop)
     */
    hideModalWithBackdrop(wizardId) {
        console.log(`üéØ Hiding modal: ${wizardId}`);

        // –°–∫—Ä—ã–≤–∞–µ–º —Å–∞–º–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const wizard = document.getElementById(wizardId);
        if (wizard) {
            wizard.style.display = 'none';
            console.log(`‚úÖ ${wizardId} hidden`);
        }

        // –°–∫—Ä—ã–≤–∞–µ–º backdrop (–æ–±—â–µ–µ –¥–ª—è –≤—Å–µ—Ö)
        const modalBackdrop = document.getElementById('modalBackdrop');
        if (modalBackdrop) {
            modalBackdrop.classList.remove('show');
            modalBackdrop.style.display = 'none';
        }
    }

    /**
     * –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –í–°–ï–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ö–ù–û–ü–û–ö
     */
    setupAllButtonListeners() {
        console.log('üîß Setting up all button listeners...');

        // Wizards –±–æ—Ç–æ–≤
        const editBotsBtn = document.getElementById('editBotsBtn');
        if (editBotsBtn) {
            editBotsBtn.addEventListener('click', () => {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º modal backdrop –∏ wizard
                const modalBackdrop = document.getElementById('modalBackdrop');
                if (modalBackdrop) {
                    modalBackdrop.classList.add('show');
                    modalBackdrop.style.display = 'flex';
                }
                this.botsModule.showBotsWizard();
            });
            console.log('‚úÖ Edit bots button listener added');
        }

        const addBotBtn = document.getElementById('addBotBtn');
        if (addBotBtn) {
            addBotBtn.addEventListener('click', () => {
                this.botsModule.addBotFromWizard();
                // –û–ë–ù–û–í–õ–Ø–ï–ú –°–ü–ò–°–û–ö –ü–û–°–õ–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø
                this.botsModule.updateBotListContainer();
                this.botsModule.renderBotsDropdown();
            });
            console.log('‚úÖ Add bot button listener added');
        }

        const resetBotSettingsBtn = document.getElementById('resetBotSettingsBtn');
        if (resetBotSettingsBtn) {
            resetBotSettingsBtn.addEventListener('click', () => {
                if (confirm('–£–¥–∞–ª–∏—Ç—å –í–°–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
                    this.botsModule.resetAllBotSettings();
                }
            });
            console.log('‚úÖ Reset bot settings button listener added');
        }

        const cancelBotsWizardBtn = document.getElementById('cancelBotsWizardBtn');
        if (cancelBotsWizardBtn) {
            cancelBotsWizardBtn.addEventListener('click', () => {
                this.botsModule.hideBotsWizard();
            });
            console.log('‚úÖ Cancel bots wizard button listener added');
        }

        // Wizards —Ç–∞–±–ª–∏—Ü
        const editSheetsBtn = document.getElementById('editSheetsBtn');
        if (editSheetsBtn) {
            editSheetsBtn.addEventListener('click', () => {
                this.showModalWithBackdrop('sheetsWizard');
            });
            console.log('‚úÖ Edit sheets button listener added');
        }

        const addSheetBtn = document.getElementById('addSheetBtn');
        if (addSheetBtn) {
            addSheetBtn.addEventListener('click', () => {
                this.botsModule.addSheetFromWizard();
                // –û–ë–ù–û–í–õ–Ø–ï–ú –°–ü–ò–°–û–ö –ü–û–°–õ–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø
                this.botsModule.updateSheetListContainer();
                this.botsModule.renderSheetsDropdown();
            });
            console.log('‚úÖ Add sheet button listener added');
        }

        const cancelSheetsWizardBtn = document.getElementById('cancelSheetsWizardBtn');
        if (cancelSheetsWizardBtn) {
            cancelSheetsWizardBtn.addEventListener('click', () => {
                this.botsModule.hideSheetsWizard();
            });
            console.log('‚úÖ Cancel sheets wizard button listener added');
        }

        // –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        const editTemplatesBtn = document.getElementById('editTemplatesBtn');
        if (editTemplatesBtn) {
            editTemplatesBtn.addEventListener('click', () => {
                this.showModalWithBackdrop('templateWizard');
            });
            console.log('‚úÖ Edit templates button listener added');
        }

        // –í—Å—Ç–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫
        const insertLinkBtn = document.getElementById('insertLinkBtn');
        if (insertLinkBtn) {
            insertLinkBtn.addEventListener('click', () => {
                this.showModalWithBackdrop('linkWizard');
            });
            console.log('‚úÖ Insert link button listener added');
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—ã—à–µ —á–µ—Ä–µ–∑ showModalWithBackdrop

        // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        const scheduleBroadcastBtn = document.getElementById('scheduleBroadcastBtn');
        if (scheduleBroadcastBtn) {
            scheduleBroadcastBtn.addEventListener('click', () => {
                this.scheduler.scheduleCurrentBroadcast();
            });
            console.log('‚úÖ Schedule broadcast button listener added');
        }

        const cancelScheduleBtn = document.getElementById('cancelScheduleBtn');
        if (cancelScheduleBtn) {
            cancelScheduleBtn.addEventListener('click', () => {
                this.scheduler.cancelScheduledBroadcast();
            });
            console.log('‚úÖ Cancel schedule button listener added');
        }

        const setTimeoutBtn = document.getElementById('setTimeoutBtn');
        if (setTimeoutBtn) {
            setTimeoutBtn.addEventListener('click', () => {
                this.scheduler.setMessageTimeout();
            });
            console.log('‚úÖ Set timeout button listener added');
        }

        // –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const selectAllUsersBtn = document.getElementById('selectAllUsersBtn');
        if (selectAllUsersBtn) {
            selectAllUsersBtn.addEventListener('click', () => {
                this.users.toggleAllUsersSelection(true);
            });
            console.log('‚úÖ Select all users button listener added');
        }

        const clearUsersSelectionBtn = document.getElementById('clearUsersSelectionBtn');
        if (clearUsersSelectionBtn) {
            clearUsersSelectionBtn.addEventListener('click', () => {
                this.users.toggleAllUsersSelection(false);
            });
            console.log('‚úÖ Clear users selection button listener added');
        }

        // –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
        const sendMassBtn = document.getElementById('sendMassBtn');
        if (sendMassBtn) {
            sendMassBtn.addEventListener('click', () => {
                console.log('üì¢ Mass broadcast button clicked');
                this.messaging.startMassBroadcast();
            });
            console.log('‚úÖ Mass broadcast button listener added');
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const requestNotificationsBtn = document.getElementById('requestNotificationsBtn');
        if (requestNotificationsBtn) {
            requestNotificationsBtn.addEventListener('click', () => {
                this.notifications.requestNotificationPermission();
            });
            console.log('‚úÖ Request notifications button listener added');
        }

        const testNotificationBtn = document.getElementById('testNotificationBtn');
        if (testNotificationBtn) {
            testNotificationBtn.addEventListener('click', () => {
                this.notifications.showTestNotification();
            });
            console.log('‚úÖ Test notification button listener added');
        }

        const checkNotificationSupportBtn = document.getElementById('checkNotificationSupportBtn');
        if (checkNotificationSupportBtn) {
            checkNotificationSupportBtn.addEventListener('click', () => {
                this.notifications.checkNotificationSupport();
            });
            console.log('‚úÖ Check notification support button listener added');
        }

        const soundSettingsBtn = document.getElementById('soundSettingsBtn');
        if (soundSettingsBtn) {
            soundSettingsBtn.addEventListener('click', () => {
                this.notifications.showSoundSettingsWizard();
            });
            console.log('‚úÖ Sound settings button listener added');
        }

        // –≠–∫—Å–ø–æ—Ä—Ç
        const exportHistoryCSVBtn = document.getElementById('exportHistoryCSVBtn');
        if (exportHistoryCSVBtn) {
            exportHistoryCSVBtn.addEventListener('click', () => {
                this.exportBroadcastHistory('csv');
            });
            console.log('‚úÖ Export CSV button listener added');
        }

        const exportHistoryPDFBtn = document.getElementById('exportHistoryPDFBtn');
        if (exportHistoryPDFBtn) {
            exportHistoryPDFBtn.addEventListener('click', () => {
                this.exportBroadcastHistory('pdf');
            });
            console.log('‚úÖ Export PDF button listener added');
        }

        const importUsersBtn = document.getElementById('importUsersBtn');
        if (importUsersBtn) {
            importUsersBtn.addEventListener('change', (e) => {
                this.users.handleImportUsers(e);
            });
            console.log('‚úÖ Import users button listener added');
        }

        // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const clearFilters = document.getElementById('resetFilters');
        if (clearFilters) {
            clearFilters.addEventListener('click', () => {
                this.users.clearAllFilters();
            });
            console.log('‚úÖ Clear filters button listener added');
        }

        const selectAllStatuses = document.getElementById('selectAllStatuses');
        if (selectAllStatuses) {
            selectAllStatuses.addEventListener('click', () => {
                this.users.selectAllStatuses();
            });
            console.log('‚úÖ Select all statuses button listener added');
        }

        // Inline –∫–Ω–æ–ø–∫–∏ - —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å buttons
        const addButton = document.getElementById('addButton');
        if (addButton) {
            addButton.addEventListener('click', () => {
                this.buttons.addMessageButton();
            });
            console.log('‚úÖ Add button listener added');
        }

        const clearButtons = document.getElementById('clearButtons');
        if (clearButtons) {
            clearButtons.addEventListener('click', () => {
                this.buttons.clearMessageButtons();
            });
            console.log('‚úÖ Clear buttons button listener added');
        }

        const previewButtons = document.getElementById('previewButtons');
        if (previewButtons) {
            previewButtons.addEventListener('click', () => {
                this.buttons.showButtonPreview();
            });
            console.log('‚úÖ Preview buttons button listener added');
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞
        const testSoundBtn = document.getElementById('testSoundBtn');
        if (testSoundBtn) {
            testSoundBtn.addEventListener('click', () => {
                this.notifications.playNotificationSound();
            });
            console.log('‚úÖ Test sound button listener added');
        }

        const saveSoundSettingsBtn = document.getElementById('saveSoundSettingsBtn');
        if (saveSoundSettingsBtn) {
            saveSoundSettingsBtn.addEventListener('click', () => {
                this.notifications.saveSoundSettingsFromUI();
            });
            console.log('‚úÖ Save sound settings button listener added');
        }

        const resetSoundSettingsBtn = document.getElementById('resetSoundSettingsBtn');
        if (resetSoundSettingsBtn) {
            resetSoundSettingsBtn.addEventListener('click', () => {
                this.notifications.resetSoundSettings();
            });
            console.log('‚úÖ Reset sound settings button listener added');
        }

        const cancelSoundSettingsBtn = document.getElementById('cancelSoundSettingsBtn');
        if (cancelSoundSettingsBtn) {
            cancelSoundSettingsBtn.addEventListener('click', () => {
                this.notifications.hideSoundSettingsWizard();
            });
            console.log('‚úÖ Cancel sound settings button listener added');
        }

        // –°–ª–∞–π–¥–µ—Ä—ã –∑–≤—É–∫–∞
        const frequencySlider = document.getElementById('frequencySlider');
        if (frequencySlider) {
            frequencySlider.addEventListener('input', (e) => {
                this.notifications.updateFrequencyValue(e.target.value);
            });
            console.log('‚úÖ Frequency slider listener added');
        }

        const durationSlider = document.getElementById('durationSlider');
        if (durationSlider) {
            durationSlider.addEventListener('input', (e) => {
                this.notifications.updateDurationValue(e.target.value);
            });
            console.log('‚úÖ Duration slider listener added');
        }

        const volumeSlider = document.getElementById('volumeSlider');
        if (volumeSlider) {
            volumeSlider.addEventListener('input', (e) => {
                this.notifications.updateVolumeValue(e.target.value);
            });
            console.log('‚úÖ Volume slider listener added');
        }

        const waveTypeSelect = document.getElementById('waveTypeSelect');
        if (waveTypeSelect) {
            waveTypeSelect.addEventListener('change', (e) => {
                this.notifications.notificationSoundSettings.waveType = e.target.value;
            });
            console.log('‚úÖ Wave type select listener added');
        }

        console.log('‚úÖ All button listeners setup completed');
    }

    /**
     * –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–û–•–†–ê–ù–ï–ù–ù–´–• –í–´–ë–û–†–û–í
     */
    restoreSavedSelections() {
        try {
            // –ó–ê–ì–†–£–ñ–ê–ï–ú –¥–∞–Ω–Ω—ã–µ –ë–û–¢–û–í –î–û –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
            this.botsModule.loadBots();

            // –¢–µ–ø–µ—Ä—å –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–æ—Ä—ã –±–æ—Ç–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã
            this.botsModule.restoreSavedSelections();

            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è
            if (this.scheduler) {
                this.scheduler.init();
            }
            console.log('‚úÖ Selections restored');

            // –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ó–ê–ö–†–´–¢–ò–Ø –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù –ü–û ESC –ò –ö–õ–ò–ö–£ –í–ù–ï
            this.setupModalClosingHandlers();

        } catch (error) {
            console.error('‚ùå Failed to restore selections:', error);
        }
    }

    /**
     * –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ó–ê–ö–†–´–¢–ò–Ø –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù
     */
    setupModalClosingHandlers() {
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ESC –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                console.log('üîô ESC pressed - closing all modals');
                this.closeAllModals();
            }
        });

        // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–ê–ö–†–´–¢–ò–Ø –ü–û –ö–õ–ò–ö–£ –í–ù–ï –î–ò–ê–õ–û–ì–ê –î–õ–Ø –ö–ê–ñ–î–û–ì–û –¢–ò–ü–ê –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù
        setTimeout(() => {
            // –§–æ—Ä–º–∞ –±–æ—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç modal-backdrop)
            const modalBackdrop = document.getElementById('modalBackdrop');
            if (modalBackdrop) {
                modalBackdrop.addEventListener('click', (e) => {
                    if (e.target === modalBackdrop) {
                        console.log('üéØ Clicked outside bots modal');
                        this.closeAllModals();
                    }
                });
            }

            // –§–æ—Ä–º–∞ —Ç–∞–±–ª–∏—Ü
            const sheetsWizard = document.getElementById('sheetsWizard');
            if (sheetsWizard) {
                sheetsWizard.addEventListener('click', (e) => {
                    if (e.target === sheetsWizard) {
                        console.log('üéØ Clicked outside sheets modal');
                        this.closeAllModals();
                    }
                });
            }

            // –§–æ—Ä–º–∞ —à–∞–±–ª–æ–Ω–æ–≤
            const templateWizard = document.getElementById('templateWizard');
            if (templateWizard) {
                templateWizard.addEventListener('click', (e) => {
                    if (e.target === templateWizard) {
                        console.log('üéØ Clicked outside template modal');
                        this.closeAllModals();
                    }
                });
            }

            // –§–æ—Ä–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞
            const soundSettingsWizard = document.getElementById('soundSettingsWizard');
            if (soundSettingsWizard) {
                soundSettingsWizard.addEventListener('click', (e) => {
                    if (e.target === soundSettingsWizard) {
                        console.log('üéØ Clicked outside sound settings modal');
                        this.closeAllModals();
                    }
                });
            }

            // –§–æ—Ä–º–∞ –≤—Å—Ç–∞–≤–∫–∏ —Å—Å—ã–ª–æ–∫
            const linkWizard = document.getElementById('linkWizard');
            if (linkWizard) {
                linkWizard.addEventListener('click', (e) => {
                    if (e.target === linkWizard) {
                        console.log('üéØ Clicked outside link modal');
                        this.closeAllModals();
                    }
                });
            }

            // –§–æ—Ä–º–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            const userHistoryWizard = document.getElementById('userHistoryWizard');
            if (userHistoryWizard) {
                userHistoryWizard.addEventListener('click', (e) => {
                    if (e.target === userHistoryWizard) {
                        console.log('üéØ Clicked outside user history modal');
                        this.closeAllModals();
                    }
                });
            }

            console.log('‚úÖ Modal closing handlers for all types set up');
        }, 1000);
    }

    /**
     * –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ò–ó GOOGLE SHEETS
     */
    async loadUsersData() {
        await this.users.loadUsersData();
    }

    /**
     * –£–°–¢–ê–ù–û–í–ö–ê –¢–ï–ú–´
     */
    setTheme(themeName) {
        if (['light', 'dark', 'gray'].includes(themeName)) {
            this.currentTheme = themeName;
            document.body.setAttribute('data-theme', themeName);
            console.log('üé® Theme set to:', themeName);
        }
    }

    /**
     * –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–Ø –¢–ï–ú
     */
    setupThemeSwitcherListeners() {
        console.log('üé® Setting up theme switcher listeners...');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ç–µ–º
        const themeSwitcher = document.querySelector('#themeSwitcher');
        if (themeSwitcher) {
            themeSwitcher.addEventListener('change', (e) => {
                this.setTheme(e.target.value);
                this.storage.saveTheme(e.target.value);
                this.addToLog(`–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${e.target.value}`);
            });
            console.log('‚úÖ Theme switcher listener added');
        }

        console.log('‚úÖ Theme switcher listeners setup completed');
    }

    /**
     * –†–ï–ù–î–ï–† –®–ê–ë–õ–û–ù–û–í –°–û–û–ë–©–ï–ù–ò–ô –í –°–ï–õ–ï–ö–¢–ï
     */
    renderTemplatesDropdown() {
        this.templatesModule.renderTemplatesDropdown();
    }

    /**
     * –†–ï–ù–î–ï–† –®–ê–ë–õ–û–ù–û–í –°–°–´–õ–û–ö –í –°–ï–õ–ï–ö–¢–ï
     */
    renderLinkTemplatesDropdown() {
        this.links.renderLinkTemplatesDropdown();
    }

    /**
     * –†–ï–ù–î–ï–† –°–ü–ò–°–ö–ê –ë–û–¢–û–í –í –°–ï–õ–ï–ö–¢–ï
     */
    renderBotsDropdown() {
        this.botsModule.renderBotsDropdown();
    }

    /**
     * –†–ï–ù–î–ï–† –°–ü–ò–°–ö–ê –¢–ê–ë–õ–ò–¶ –í –°–ï–õ–ï–ö–¢–ï
     */
    renderSheetsDropdown() {
        this.botsModule.renderSheetsDropdown();
    }

    /**
     * –ü–û–ö–ê–ó –û–°–ù–û–í–ù–û–ì–û –ò–ù–¢–ï–†–§–ï–ô–°–ê
     */
    showMainApp() {
        console.log('üé¨ showMainApp called');

        // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –æ—à–∏–±–∫—É
        if (this.dom.loading) {
            this.dom.loading.classList.add('hidden');
            console.log('‚úÖ Loading screen hidden');
        }
        if (this.dom.error) {
            this.dom.error.classList.add('hidden');
            console.log('‚úÖ Error screen hidden');
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (this.dom.app) {
            this.dom.app.style.display = 'block';
            this.dom.app.classList.add('animate');
            console.log('‚úÖ App container shown');
        }

        if (this.dom.main) {
            this.dom.main.classList.add('animate');
            console.log('‚úÖ Main app animated');
        }

        // –ü–æ–∫–∞–∑–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        this.showStatus('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!', 'success');
    }

    /**
     * –ü–û–ö–ê–ó –≠–ö–†–ê–ù–ê –û–®–ò–ë–ö–ò
     */
    showErrorScreen(message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') {
        if (this.dom.loading) this.dom.loading.classList.add('hidden');
        if (this.dom.main) this.dom.main.classList.add('hidden');
        if (this.dom.error) {
            this.dom.error.classList.remove('hidden');
            const errorText = this.dom.error.querySelector('.access-denied-text');
            if (errorText) errorText.textContent = message;
        }
    }

    /**
     * –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
     */
    showStatus(message, type = 'info') {
        if (!this.dom.status) return;

        this.dom.status.textContent = message;
        this.dom.status.className = `status-indicator status-${type}`;

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã (–∫—Ä–æ–º–µ –æ—à–∏–±–æ–∫)
        if (type !== 'error') {
            setTimeout(() => {
                if (this.dom.status) {
                    this.dom.status.className = 'status-indicator';
                }
            }, 3000);
        }
    }

    /**
     * –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –í –õ–û–ì
     */
    addToLog(message) {
        const logContainer = document.getElementById('logContainer');
        if (logContainer) {
            const timestamp = new Date().toLocaleTimeString();
            logContainer.innerHTML += `<br>${timestamp}: ${message}`;
            logContainer.scrollTop = logContainer.scrollHeight; // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        }
    }

    /**
     * –£–¢–ò–õ–ò–¢–ê –ó–ê–î–ï–†–ñ–ö–ò
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –≠–ö–°–ü–û–†–¢ –ò–°–¢–û–†–ò–ò –†–ê–°–°–´–õ–û–ö
     */
    exportBroadcastHistory(format) {
        if (!this.broadcastHistory || this.broadcastHistory.length === 0) {
            alert('–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
            return;
        }

        const now = new Date().toISOString().split('T')[0];
        const filename = `telegram_sender_history_${now}`;

        if (format === 'csv') {
            let csv = '–î–∞—Ç–∞,–°–æ–æ–±—â–µ–Ω–∏–µ,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,–†–µ–∑—É–ª—å—Ç–∞—Ç\n';
            this.broadcastHistory.forEach(item => {
                const date = new Date(item.timestamp).toLocaleString();
                const message = `"${(item.message || '').replace(/"/g, '""')}"`;
                const userCount = item.sentTo || 0;
                const status = item.status || 'unknown';
                csv += `${date},${message},${userCount},${status}\n`;
            });

            this.downloadFile(`${filename}.csv`, csv, 'text/csv');
        } else if (format === 'pdf') {
            // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .pdf
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF
            let content = '–ò–°–¢–û–†–ò–Ø –†–ê–°–°–´–õ–û–ö TELEGRAM SENDER\n\n';
            this.broadcastHistory.forEach((item, index) => {
                content += `${index + 1}. ${new Date(item.timestamp).toLocaleString()}\n`;
                content += `    –°–æ–æ–±—â–µ–Ω–∏–µ: ${item.message || ''}\n`;
                content += `    –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${item.sentTo || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n`;
                content += `    –°—Ç–∞—Ç—É—Å: ${item.status || 'unknown'}\n\n`;
            });

            this.downloadFile(`${filename}.txt`, content, 'text/plain');
        }

        this.addToLog(`–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format.toUpperCase()}`);
        alert(`–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: ${filename}.${format}`);
    }

    /**
     * –°–ö–ê–ß–ò–í–ê–ù–ò–ï –§–ê–ô–õ–ê
     */
    downloadFile(filename, content, mimeType) {
        const blob = new Blob([content], { type: mimeType });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    /**
     * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê localStorage –ò –°–û–°–¢–û–Ø–ù–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
     */
    testLocalStorageAndData() {
        console.log('üîç Running diagnostic test...');

        // –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï localStorage
        let localStorageWorks = true;
        try {
            localStorage.setItem('diagnostic_test', 'test_value');
            const retrieved = localStorage.getItem('diagnostic_test');
            if (retrieved !== 'test_value') {
                throw new Error('Retrieval failed');
            }
            localStorage.removeItem('diagnostic_test');
        } catch (error) {
            console.error('‚ùå localStorage error:', error);
            localStorageWorks = false;
        }

        // –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–ô localStorage
        const telegramKeys = this.storage.diagnoseStorage();

        // –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–§–ò–≥—É—Ä–∞—Ü–∏–∏
        const configCheck = {
            CONFIG: typeof window.CONFIG !== 'undefined',
            ADMIN_ID: window.CONFIG?.ADMIN_ID,
            BOT_TOKEN: window.CONFIG?.BOT_TOKEN,
            SHEET_ID: window.CONFIG?.SHEET_ID,
            PROXY_URL: window.CONFIG?.PROXY_URL
        };

        const dataStatus = {
            botsCount: this.bots?.length || 0,
            usersCount: this.usersData?.length || 0,
            templatesCount: this.templates?.length || 0,
            linkTemplatesCount: this.linkTemplates?.length || 0
        };

        // –ü–û–î–ì–û–¢–û–í–ö–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô
        const recommendations = [];
        if (!localStorageWorks) {
            recommendations.push('‚ùå localStorage –ù–ï –†–ê–ë–û–¢–ê–ï–¢! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞');
        }
        if (telegramKeys.length === 0) {
            recommendations.push('‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        }
        if (this.bots?.length === 0) {
            recommendations.push('ü§ñ –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ "‚öôÔ∏è –ë–æ—Ç—ã"');
        }
        if (!this.currentBot) {
            recommendations.push('ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤');
        }
        if (this.usersData?.length === 0) {
            recommendations.push('üìä –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –Ω–∞–∂–º–∏—Ç–µ "üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å"');
        }
        if (this.linkTemplates?.length === 0) {
            recommendations.push('üîó –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –æ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è');
        }

        if (recommendations.length > 0) {
            console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
            recommendations.forEach((rec, i) => console.log(`  ${i + 1}. ${rec}`));
        } else {
            console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –º–µ—Å—Ç–µ! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
        }

        // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        let resultMessage = `üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n`;
        resultMessage += `üíæ localStorage: ${localStorageWorks ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}\n`;
        resultMessage += `ü§ñ –ë–æ—Ç–æ–≤: ${this.bots?.length || 0}\n`;
        resultMessage += `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.usersData?.length || 0}\n`;
        resultMessage += `üìù –®–∞–±–ª–æ–Ω–æ–≤: ${this.templates?.length || 0}\n`;
        resultMessage += `üîó –°—Å—ã–ª–æ–∫: ${this.linkTemplates?.length || 0}\n\n`;

        if (recommendations.length > 0) {
            resultMessage += '‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:\n';
            recommendations.forEach((rec, i) => resultMessage += `${i + 1}. ${rec}\n`);
        } else {
            resultMessage += '‚úÖ –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ!';
        }

        alert(resultMessage);
        return { localStorageWorks, dataStatus, configCheck, recommendations };
    }
}

// ===========================================
// –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–• –î–õ–Ø –¢–ê–ë–õ–ò–¶–´
// ===========================================
function getPremiumDisplay(user) {
    // –ü–µ—Ä–µ–±–µ—Ä–µ–º –≤—Å–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–º–∏—É–º-–¥–∞–Ω–Ω—ã—Ö
    const premiumFields = ['premium', '–ø—Ä–µ–º–∏—É–º', 'is_premium', 'premium_user', 'vip', '–ø—Ä–æ'];
    for (const field of premiumFields) {
        const value = user[field];
        if (value !== undefined && value !== null) {
            return value.toString().trim();
        }
    }
    return '';
}

function getTrafficSourceDisplay(user) {
    // –¢–û–ß–ù–´–ï –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –∏–∑ Google Sheets (–∫–∞–∫ –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–æ—Å–ª–µ lowercase –≤ –ø–∞—Ä—Å–µ—Ä–µ)
    const trafficFields = [
        'traffic from',  // ‚Üê –≠–¢–û –ü–û–õ–ï –ï–°–¢–¨ –í –í–ê–®–ï–ô –¢–ê–ë–õ–ò–¶–ï!
        'traffic_from',
        '–∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞',
        'source',
        'from',
        'utm_source',
        '–∫–∞–Ω–∞–ª',
        '—Ç—Ä–∞—Ñ–∏–∫'
    ];

    for (const field of trafficFields) {
        const value = user[field];
        if (value !== undefined && value !== null) {
            const trimmedValue = value.toString().trim();
            console.log(`‚úÖ Found traffic source "${trimmedValue}" from field "${field}"`);
            return trimmedValue;
        }
    }

    console.log(`‚ùå No traffic source found for user ${user.user_id || 'unknown'}`);
    return '';
}

function getTrialCallsDisplay(user) {
    // –¢–û–ß–ù–´–ï –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –∏–∑ Google Sheets (–∫–∞–∫ –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–æ—Å–ª–µ lowercase –≤ –ø–∞—Ä—Å–µ—Ä–µ)
    const trialFields = [
        'triall img gen calls',  // ‚Üê –≠–¢–û –ü–û–õ–ï –ï–°–¢–¨ –í –í–ê–®–ï–ô –¢–ê–ë–õ–ò–¶–ï!
        'trial_img_gen_calls',
        'trial_calls',
        '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ trial calls',
        'trial_calls_count',
        'calls',
        'trial_count'
    ];

    for (const field of trialFields) {
        const value = user[field];
        if (value !== undefined && value !== null) {
            const trimmedValue = value.toString().trim();
            console.log(`‚úÖ Found trial calls: "${trimmedValue}" from field "${field}"`);
            return trimmedValue;
        }
    }

    console.log(`‚ùå No trial calls found for user ${user.user_id || 'unknown'}`);
    return '';
}

function getTagDisplay(user) {
    const tagFields = ['tag', 'tags', 'label', 'group', 'category'];
    for (const field of tagFields) {
        const value = user[field];
        if (value !== undefined && value !== null) {
            return value.toString().trim();
        }
    }
    return '';
}

function getLastSentDisplay(user) {
    const dateFields = ['last_sent', 'last_send', '–ø–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞', 'sent_at', 'last_message'];
    for (const field of dateFields) {
        const value = user[field];
        if (value !== undefined && value !== null && value.toString().trim() !== '') {
            return value.toString().trim();
        }
    }
    return '';
}

// ===========================================
// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
// ===========================================

/**
 * –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
 */
function runLocalStorageDiagnostic() {
    if (window.telegramSender) {
        window.telegramSender.testLocalStorageAndData();
    } else {
        alert('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
function testElementsExist() {
    console.log('üß™ Testing UI elements...');

    const testResults = {
        buttons: {
            loadBtn: !!document.getElementById('loadBtn'),
            sendBtn: !!document.getElementById('sendBtn'),
            masterUserCheckbox: !!document.getElementById('masterUserCheckbox')
        },
        inputs: {
            messageInput: !!document.getElementById('messageInput'),
            searchFilter: !!document.getElementById('searchFilter'),
            usersTableBody: !!document.getElementById('usersTableBody')
        },
        wizards: {
            botsWizard: !!document.getElementById('botsWizard'),
            sheetsWizard: !!document.getElementById('sheetsWizard'),
            templateWizard: !!document.getElementById('templateWizard')
        }
    };

    console.table(testResults);
    const totalFound = Object.values(testResults).flat().filter(Boolean).length;
    const totalExpected = Object.values(testResults).flat().length;

    if (totalFound === totalExpected) {
        console.log('‚úÖ All elements found!');
        alert('‚úÖ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞–π–¥–µ–Ω—ã! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ.');
    } else {
        console.warn(`‚ö†Ô∏è Only ${totalFound}/${totalExpected} elements found`);
        alert(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ ${totalFound}/${totalExpected} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É.`);
    }

    return testResults;
}

/**
 * –ü–û–ö–ê–ó –ò–°–¢–û–†–ò–ò –°–û–û–ë–©–ï–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–û–ú –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï –° –ü–û–õ–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô –ò–ó –¢–ê–ë–õ–ò–¶–´
 */
function showUserMessageHistory(userId) {
    if (!window.telegramSender) {
        alert('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
        return;
    }

    const userHistory = window.telegramSender.userMessageHistory?.[userId];
    const user = window.telegramSender.usersData?.find(u => u.user_id == userId);
    const userName = user ? `${user.first_name || ''} ${user.last_name || ''}`.trim() || user.user_id : userId;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º backdrop
    const modalBackdrop = document.getElementById('modalBackdrop');
    if (modalBackdrop) {
        modalBackdrop.classList.add('show');
        modalBackdrop.style.display = 'flex';
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏
    const historyWizard = document.getElementById('userHistoryWizard');
    if (historyWizard) {
        historyWizard.style.display = 'block';

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const titleElement = document.getElementById('userHistoryTitle');
        if (titleElement) {
            titleElement.textContent = `üìÑ –ò—Å—Ç–æ—Ä–∏—è: ${userName}`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        const headerElement = document.getElementById('userHistoryWizardHeader');
        if (headerElement && user) {
            const premiumDisplay = getPremiumDisplay(user);
            const trafficDisplay = getTrafficSourceDisplay(user);
            const trialDisplay = getTrialCallsDisplay(user);
            const tagDisplay = getTagDisplay(user);

            headerElement.innerHTML = `
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px; margin-bottom: 15px; padding: 10px; background: var(--bg-tertiary); border-radius: 6px;">
                    <div><strong>üÜî ID:</strong> <code style="background:#f8f9fa;color:#000;padding:1px 4px;border-radius:2px;font-size:11px;">${user.user_id}</code></div>
                    <div><strong>üë§ –ò–º—è:</strong> ${user.first_name || '‚Äî'}</div>
                    <div><strong>üë§ –§–∞–º–∏–ª–∏—è:</strong> ${user.last_name || '‚Äî'}</div>
                    <div><strong>üë• Username:</strong> ${user.username ? `<a href="https://t.me/${user.username}" target="_blank">@${user.username}</a>` : '‚Äî'}</div>
                    <div><strong>üìä –°—Ç–∞—Ç—É—Å:</strong> <span class="status-pill">${user.status || 'unknown'}</span></div>
                    <div><strong>üåç –Ø–∑—ã–∫:</strong> <span style="background: #e3f2fd; color: #1976d2; padding: 2px 6px; border-radius: 8px; font-size: 10px; font-weight: bold;">${user.language || '‚Äî'}</span></div>
                    <div><strong>‚≠ê –ü—Ä–µ–º–∏—É–º:</strong> <strong style="color: #dc3545; background: #f8d7da; padding: 2px 6px; border-radius: 4px;">${premiumDisplay}</strong></div>
                    <div><strong>üö¶ –ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞:</strong> <strong style="color: #28a745; background: #d4edda; padding: 2px 6px; border-radius: 4px;">${trafficDisplay}</strong></div>
                    <div><strong>üé® Trial Calls:</strong> <span style="background: #fff3cd; color: #856404; padding: 2px 6px; border-radius: 8px; font-size: 10px; font-weight: bold; border: 2px solid #ff9900;"><strong>${trialDisplay}</strong></span></div>
                    <div><strong>üè∑Ô∏è –¢–µ–≥:</strong> ${tagDisplay}</div>
                </div>
                <div style="text-align: center; color: var(--text-secondary);">
                    –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: ${window.telegramSender.messaging.getLastSentDisplay(user).replace(/<[^>]*>/g, '').trim() || '–ù–∏–∫–æ–≥–¥–∞'}
                </div>
            `;
        } else if (headerElement) {
            headerElement.innerHTML = `
                <div style="text-align: center; color: var(--text-secondary); padding: 20px;">
                    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö<br>
                    <small>ID: ${userId}</small>
                </div>
            `;
        }

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏—Å—Ç–æ—Ä–∏–∏
        const contentElement = document.getElementById('userHistoryContent');
        if (contentElement) {
            if (!userHistory || userHistory.length === 0) {
                contentElement.innerHTML = `
                    <div style="text-align: center; color: var(--text-secondary); padding: 40px;">
                        üì≠ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–∞<br>
                        <small>–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–æ–∫</small>
                    </div>
                `;
            } else {
                // –£–ø–æ—Ä—è–¥–æ—á–∏–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç –Ω–æ–≤–æ–≥–æ –∫ —Å—Ç–∞—Ä–æ–º—É)
                const sortedHistory = [...userHistory].sort((a, b) =>
                    new Date(b.timestamp) - new Date(a.timestamp)
                );

                let historyHtml = '<div style="max-height: 400px; overflow-y: auto;">';

                sortedHistory.forEach((entry, index) => {
                    const date = new Date(entry.timestamp).toLocaleString('ru-RU');
                    const status = entry.status === 'delivered' ? '‚úÖ' : entry.status === 'failed' ? '‚ùå' : '‚è≥';
                    const statusText = entry.status === 'delivered' ? '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' :
                                      entry.status === 'failed' ? '–û—à–∏–±–∫–∞' : '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è';
                    const statusColor = entry.status === 'delivered' ? 'var(--accent-success)' :
                                       entry.status === 'failed' ? 'var(--accent-error)' : 'var(--accent-warning)';

                    const message = entry.message || '';
                    const shortMessage = message.length > 100 ? message.substring(0, 100) + '...' : message;

                    historyHtml += `
                        <div style="border: 1px solid var(--border); border-radius: 8px; padding: 12px; margin-bottom: 8px; background: var(--bg-secondary);">
                            <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 8px;">
                                <span style="font-weight: 600; color: var(--text-primary);">${index + 1}. ${date}</span>
                                <span style="color: ${statusColor}; font-weight: 500;">${status} ${statusText}</span>
                            </div>
                            <div style="color: var(--text-primary); line-height: 1.4;">
                                "${shortMessage}"
                            </div>
                        </div>
                    `;
                });

                historyHtml += '</div>';
                contentElement.innerHTML = historyHtml;
            }
        }
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    const clearBtn = document.getElementById('clearUserHistoryBtn');
    if (clearBtn) {
        clearBtn.onclick = () => {
            if (confirm(`–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userName}? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
                if (window.telegramSender.userMessageHistory) {
                    delete window.telegramSender.userMessageHistory[userId];
                    window.telegramSender.storage.saveUserMessageHistory();
                    window.telegramSender.closeAllModals();
                    alert('–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞');
                }
            }
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.runLocalStorageDiagnostic = runLocalStorageDiagnostic;
window.testElementsExist = testElementsExist;

// ===========================================
// –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// ===========================================

/**
 * –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Telegram Sender WebApp loaded');
    window.telegramSender = new TelegramSender();
    window.telegramSender.init(); // –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
});
