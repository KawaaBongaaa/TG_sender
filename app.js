/* =========================================== */
/* LOADING MANAGER - –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ì–†–£–ó–ö–û–ô */
/* =========================================== */

class LoadingManager {
    constructor() {
        this.activeLoadings = new Map();
        this.toasts = [];
        this.initializeToastContainer();
        console.log('üéØ LoadingManager initialized');
    }

    /**
     * –ü–û–ö–ê–ó–ê–¢–¨ –ó–ê–ì–†–£–ó–ö–£ –ù–ê –ö–ù–û–ü–ö–ï
     */
    showButtonLoading(buttonElement, loadingText = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
        if (!buttonElement) return false;

        buttonElement.classList.add('btn-loading');
        buttonElement.disabled = true;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        if (!buttonElement.dataset.originalText) {
            buttonElement.dataset.originalText = buttonElement.innerHTML;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ loading —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        buttonElement.innerHTML = `
            <span class="loading-text">${loadingText}</span>
            ${buttonElement.dataset.originalText}
        `;

        this.activeLoadings.set(buttonElement.id || buttonElement, Date.now());
        console.log('üéØ Button loading started:', buttonElement.id || 'button');
        return true;
    }

    /**
     * –°–ö–†–´–¢–¨ –ó–ê–ì–†–£–ó–ö–£ –° –ö–ù–û–ü–ö–ò
     */
    hideButtonLoading(buttonElement) {
        if (!buttonElement) return false;

        buttonElement.classList.remove('btn-loading');
        buttonElement.disabled = false;

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        if (buttonElement.dataset.originalText) {
            buttonElement.innerHTML = buttonElement.dataset.originalText;
            delete buttonElement.dataset.originalText;
        }

        this.activeLoadings.delete(buttonElement.id || buttonElement);
        console.log('‚úÖ Button loading finished:', buttonElement.id || 'button');
        return true;
    }

    /**
     * –û–ë–ù–û–í–ò–¢–¨ –ü–†–û–ì–†–ï–°–°-–ë–ê–†
     */
    updateProgressBar(progressPercent, current, total, text = null) {
        const progressContainer = document.getElementById('progressContainer');
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');

        if (!progressContainer || !progressBar || !progressText) return false;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        progressContainer.style.display = 'block';

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ—Å–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progressBar.style.width = Math.min(progressPercent, 100) + '%';

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        const displayText = text ||
            `${current}/${total} (${Math.round(progressPercent)}%)`;

        progressText.textContent = displayText;

        console.log('üìä Progress updated:', progressPercent, `% - ${displayText}`);
        return true;
    }

    /**
     * –°–ö–†–´–¢–¨ –ü–†–û–ì–†–ï–°–°-–ë–ê–†
     */
    hideProgressBar() {
        const progressContainer = document.getElementById('progressContainer');
        if (progressContainer) {
            progressContainer.style.display = 'none';
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        const progressBar = document.getElementById('progressBar');
        if (progressBar) {
            progressBar.style.width = '0%';
        }

        console.log('üìä Progress bar hidden');
        return true;
    }

    /**
     * –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ù–¢–ï–ô–ù–ï–†–ê TOAST –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
     */
    initializeToastContainer() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        let container = document.getElementById('toastContainer');
        if (!container) {
            container = document.createElement('div');
            container.id = 'toastContainer';
            container.className = 'toast-container';
            document.body.appendChild(container);
        }
    }

    /**
     * –ü–û–ö–ê–ó–ê–¢–¨ TOAST –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
     */
    showToast(message, type = 'info', duration = 5000) {
        const toastContainer = document.getElementById('toastContainer');
        if (!toastContainer) return false;

        // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        const icons = {
            success: '‚úÖ',
            error: '‚ùå',
            warning: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è'
        };

        // –°–æ–∑–¥–∞–µ–º toast —ç–ª–µ–º–µ–Ω—Ç
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.innerHTML = `
            <span class="toast-icon">${icons[type] || 'üîµ'}</span>
            <span class="toast-message">${message}</span>
            <button class="toast-close" onclick="this.parentElement.remove()">&times;</button>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        toastContainer.appendChild(toast);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            toast.classList.add('show');
        }, 10);

        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        if (duration > 0) {
            setTimeout(() => {
                this.hideToast(toast);
            }, duration);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö toast'–æ–≤
        this.toasts.push(toast);

        console.log('üçû Toast shown:', type, message);
        return toast;
    }

    /**
     * –°–ö–†–´–¢–¨ TOAST –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
     */
    hideToast(toastElement) {
        if (!toastElement) return false;

        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –ø–æ–∫–∞–∑–∞
        toastElement.classList.remove('show');

        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            if (toastElement.parentElement) {
                toastElement.parentElement.removeChild(toastElement);
            }

            // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            const index = this.toasts.indexOf(toastElement);
            if (index > -1) {
                this.toasts.splice(index, 1);
            }
        }, 300);

        console.log('üçû Toast hidden');
        return true;
    }

    /**
     * –°–ö–†–´–¢–¨ –í–°–ï TOAST –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
     */
    hideAllToasts() {
        this.toasts.forEach(toast => this.hideToast(toast));
        console.log('üçû All toasts hidden');
        return true;
    }

    /**
     * –ü–†–û–í–ï–†–ò–¢–¨ –ï–°–¢–¨ –õ–ò –ê–ö–¢–ò–í–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê
     */
    hasActiveLoading() {
        return this.activeLoadings.size > 0;
    }

    /**
     * –°–ö–†–´–¢–¨ –í–°–ï –ê–ö–¢–ò–í–ù–´–ï –ó–ê–ì–†–£–ó–ö–ò
     */
    clearAllLoading() {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏-–∑–∞–≥—Ä—É–∑–∫–∏
        this.activeLoadings.forEach((timestamp, button) => {
            this.hideButtonLoading(button);
        });

        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
        this.hideProgressBar();

        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ toast'—ã
        this.hideAllToasts();

        console.log('üßπ All loading states cleared');
        return true;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä LoadingManager
window.loadingManager = new LoadingManager();

/* =========================================== */
/* HELPSYSTEM - –°–ò–°–¢–ï–ú–ê –ü–û–ú–û–©–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú */
/* =========================================== */

class HelpSystem {
    constructor(mainApp) {
        this.mainApp = mainApp;
        this.tooltips = new Map();
        this.isHelpVisible = false;
        this.helpModal = null;
        this.helpButton = null;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–º–æ—â–∏
        this.init();
        console.log('üÜò HelpSystem initialized');
    }

    /**
     * –î–û–ë–ê–í–ò–¢–¨ –ü–û–î–°–ö–ê–ó–ö–£ –ö –≠–õ–ï–ú–ï–ù–¢–£
     */
    addTooltip(elementId, title, description = '', position = 'top') {
        const element = document.getElementById(elementId);
        if (!element) {
            console.warn(`HelpSystem: Element ${elementId} not found`);
            return false;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å tooltip
        element.classList.add('tooltip');

        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
        const tooltipText = document.createElement('span');
        tooltipText.className = 'tooltip-text';
        tooltipText.innerHTML = `<strong>${title}</strong>${description ? `<br>${description}` : ''}`;

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        if (position === 'bottom') {
            tooltipText.style.bottom = 'auto';
            tooltipText.style.top = '125%';
        }

        element.appendChild(tooltipText);
        this.tooltips.set(elementId, { element, title, description, position });

        console.log(`üí° Tooltip added to ${elementId}: ${title}`);
        return true;
    }

    /**
     * –£–î–ê–õ–ò–¢–¨ –ü–û–î–°–ö–ê–ó–ö–£ –° –≠–õ–ï–ú–ï–ù–¢–ê
     */
    removeTooltip(elementId) {
        const tooltipData = this.tooltips.get(elementId);
        if (tooltipData) {
            tooltipData.element.classList.remove('tooltip');
            const tooltipText = tooltipData.element.querySelector('.tooltip-text');
            if (tooltipText) {
                tooltipData.element.removeChild(tooltipText);
            }
            this.tooltips.delete(elementId);
            console.log(`üí° Tooltip removed from ${elementId}`);
            return true;
        }
        return false;
    }

    /**
     * –°–û–ó–î–ê–¢–¨ –ö–ù–û–ü–ö–£ –ü–û–ú–û–©–ò
     */
    createHelpButton() {
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
        this.helpButton = document.createElement('button');
        this.helpButton.className = 'help-button';
        this.helpButton.innerHTML = '‚ùì';
        this.helpButton.title = '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏';

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        this.helpButton.addEventListener('click', () => this.showHelpModal());

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–æ–∫—É–º–µ–Ω—Ç
        document.body.appendChild(this.helpButton);

        console.log('üÜò Help button created');
        return this.helpButton;
    }

    /**
     * –ü–û–ö–ê–ó–ê–¢–¨ –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –ü–û–ú–û–©–ò
     */
    showHelpModal() {
        if (this.helpModal) {
            this.helpModal.style.display = 'block';
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.helpModal = document.createElement('div');
        this.helpModal.className = 'help-modal';

        this.helpModal.innerHTML = `
            <div class="help-header">
                <h2 class="help-title">üÜò –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º</h2>
                <button class="help-close" onclick="window.helpSystem.hideHelpModal()">√ó</button>
            </div>

            <div class="help-content">
                <div class="help-section">
                    <h3>ü§ñ –ë–æ—Ç—ã –∏ —Ç–∞–±–ª–∏—Ü—ã</h3>
                    <div class="help-item">
                        <strong>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞</strong>
                        <p>–ù–∞–∂–º–∏—Ç–µ ‚öôÔ∏è —Ä—è–¥–æ–º —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º –±–æ—Ç–æ–≤. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ API —Ç–æ–∫–µ–Ω –æ—Ç @BotFather.</p>
                    </div>
                    <div class="help-item">
                        <strong>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã</strong>
                        <p>–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞, –∑–∞—Ç–µ–º ‚öôÔ∏è —Ä—è–¥–æ–º —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ Google Sheets. –í—Å—Ç–∞–≤—å—Ç–µ ID –∏–∑ URL —Ç–∞–±–ª–∏—Ü—ã.</p>
                    </div>
                    <div class="help-item">
                        <strong>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</strong>
                        <p>–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–∂–º–∏—Ç–µ üì• "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.</p>
                    </div>
                </div>

                <div class="help-section">
                    <h3>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h3>
                    <div class="help-item">
                        <strong>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</strong>
                        <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ–∫–±–æ–∫—Å—ã —Å—Ç–∞—Ç—É—Å–æ–≤, —è–∑—ã–∫–æ–≤ –∏ Trial Calls –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞.</p>
                    </div>
                    <div class="help-item">
                        <strong>–†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏</strong>
                        <p>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é ‚öôÔ∏è –≤ —Ä–∞–∑–¥–µ–ª–µ —Å–ø–∏—Å–∫–æ–≤.</p>
                    </div>
                    <div class="help-item">
                        <strong>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</strong>
                        <p>–û—Ç–º–µ—Ç—å—Ç–µ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ–∫–±–æ–∫—Å–∞–º–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ üóÇÔ∏è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫.</p>
                    </div>
                </div>

                <div class="help-section">
                    <h3>üì¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</h3>
                    <div class="help-item">
                        <strong>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</strong>
                        <p>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏ {first_name}, {username}, {user_id}.</p>
                    </div>
                    <div class="help-item">
                        <strong>–ö–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</strong>
                        <p>–î–æ–±–∞–≤–ª—è–π—Ç–µ inline-–∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ URL, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤—è—Ç—Å—è –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.</p>
                    </div>
                    <div class="help-item">
                        <strong>–ú–µ–¥–∏–∞ –≤–ª–æ–∂–µ–Ω–∏—è</strong>
                        <p>–ü—Ä–∏–∫—Ä–µ–ø–ª—è–π—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –¢–∏–ø –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</p>
                    </div>
                </div>

                <div class="help-section">
                    <h3>‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                    <div class="help-item">
                        <strong>–®–∞–±–ª–æ–Ω—ã —Ä–∞—Å—Å—ã–ª–æ–∫</strong>
                        <p>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–∏–º–∏—Ç—ã –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —á–µ—Ä–µ–∑ ‚öôÔ∏è —à–∞–±–ª–æ–Ω–æ–≤.</p>
                    </div>
                    <div class="help-item">
                        <strong>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞</strong>
                        <p>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∏ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ.</p>
                    </div>
                    <div class="help-item">
                        <strong>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫</strong>
                        <p>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏.</p>
                    </div>
                </div>

                <div class="help-section">
                    <h3>üîó –°—Å—ã–ª–∫–∏ –∏ —à–∞–±–ª–æ–Ω—ã</h3>
                    <div class="help-item">
                        <strong>–í—Å—Ç–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫</strong>
                        <p>–ù–∞–∂–º–∏—Ç–µ üîó, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ URL —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—Å—Ç–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ.</p>
                    </div>
                    <div class="help-item">
                        <strong>–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π</strong>
                        <p>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã —á–µ—Ä–µ–∑ ‚öôÔ∏è —à–∞–±–ª–æ–Ω–æ–≤ –∏ –ø—Ä–∏–º–µ–Ω—è–π—Ç–µ –∏—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ.</p>
                    </div>
                    <div class="help-item">
                        <strong>–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ</strong>
                        <p>–°—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.</p>
                    </div>
                </div>

                <div class="help-section">
                    <h3>‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</h3>
                    <div class="help-item">
                        <strong>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞</strong>
                        <p>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∑–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ ‚öôÔ∏è —Ä–∞–∑–¥–µ–ª–µ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏.</p>
                    </div>
                    <div class="help-item">
                        <strong>–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏</strong>
                        <p>–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ CSV –∏–ª–∏ PDF –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.</p>
                    </div>
                    <div class="help-item">
                        <strong>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</strong>
                        <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üíæ –∫–Ω–æ–ø–∫—É –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è localStorage.</p>
                    </div>
                </div>
            </div>

            <div class="help-actions">
                <button class="help-action-btn primary" onclick="window.helpSystem.startTutorial()">
                    üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
                </button>
                <button class="help-action-btn secondary" onclick="window.helpSystem.hideHelpModal()">
                    –ü–æ–Ω—è—Ç–Ω–æ, —Å–ø–∞—Å–∏–±–æ
                </button>
            </div>
        `;

        document.body.appendChild(this.helpModal);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.helpModal && this.helpModal.style.display !== 'none') {
                this.hideHelpModal();
            }
        });

        console.log('üÜò Help modal created and shown');
    }

    /**
     * –°–ö–†–´–¢–¨ –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –ü–û–ú–û–©–ò
     */
    hideHelpModal() {
        if (this.helpModal) {
            this.helpModal.style.display = 'none';
            console.log('üÜò Help modal hidden');
        }
    }

    /**
     * –ó–ê–ü–£–°–¢–ò–¢–¨ –¢–£–¢–û–†–ò–ê–õ –î–õ–Ø –ù–û–í–ò–ß–ö–û–í
     */
    startTutorial() {
        this.hideHelpModal();

        this.showTutorialStep(1, 'tutorial_welcome');

        window.loadingManager?.showToast(
            'üöÄ –ó–∞–ø—É—â–µ–Ω —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è! –°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º',
            'info',
            3000
        );
    }

    /**
     * –ü–û–ö–ê–ó–ê–¢–¨ –®–ê–ì –¢–£–¢–û–†–ò–ê–õ–ê
     */
    showTutorialStep(step, stepId) {
        const steps = {
            'tutorial_welcome': {
                title: 'üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Sender!',
                message: '–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –º–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ Telegram –∫–∞–Ω–∞–ª–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö.',
                element: 'compact-header',
                position: 'bottom',
                action: () => this.showTutorialStep(2, 'tutorial_bot')
            },
            'tutorial_bot': {
                title: 'ü§ñ –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞',
                message: '–ù–∞–∂–º–∏—Ç–µ ‚öôÔ∏è —Ä—è–¥–æ–º —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º –±–æ—Ç–æ–≤, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞.',
                element: 'editBotsBtn',
                position: 'bottom',
                action: () => this.showTutorialStep(3, 'tutorial_users')
            },
            'tutorial_users': {
                title: 'üë• –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                message: '–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–∂–º–∏—Ç–µ üì• —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.',
                element: 'loadUsersBtn',
                position: 'bottom',
                action: () => this.showTutorialStep(4, 'tutorial_message')
            },
            'tutorial_message': {
                title: 'üìù –°–æ–∑–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                message: '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã {first_name} –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.',
                element: 'messageInput',
                position: 'top',
                action: () => this.showTutorialStep(5, 'tutorial_buttons')
            },
            'tutorial_buttons': {
                title: 'üîò –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)',
                message: '–°–æ–∑–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ URL –¥–ª—è –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.',
                element: 'addButton',
                position: 'top',
                action: () => this.showTutorialStep(6, 'tutorial_send')
            },
            'tutorial_send': {
                title: 'üì§ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ',
                message: '–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å 1-2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É.',
                element: 'sendBtn',
                position: 'top',
                action: () => {
                    window.loadingManager?.showToast(
                        'üéâ –¢—É—Ç–æ—Ä–∏–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ',
                        'success',
                        5000
                    );
                }
            }
        };

        const stepInfo = steps[stepId];
        if (!stepInfo) return;

        // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –¥–ª—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
        this.createTutorialOverlay(stepInfo, stepId);
    }

    /**
     * –°–û–ó–î–ê–¢–¨ –û–í–ï–†–õ–ï–ô –î–õ–Ø –®–ê–ì–ê –¢–£–¢–û–†–ò–ê–õ–ê
     */
    createTutorialOverlay(stepInfo, stepId) {
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–≤–µ—Ä–ª–µ–π
        const existingOverlay = document.querySelector('.tutorial-overlay');
        if (existingOverlay) {
            existingOverlay.remove();
        }

        const overlay = document.createElement('div');
        overlay.className = 'tutorial-overlay';

        overlay.innerHTML = `
            <div class="tutorial-highlight"></div>
            <div class="tutorial-dialog">
                <div class="tutorial-step">${stepInfo.title}</div>
                <div class="tutorial-message">${stepInfo.message}</div>
                <button class="tutorial-next" onclick="this.parentElement.parentElement.remove(); window.helpSystem.showTutorialStep(${parseInt(stepId.split('_')[1]) + 1}, '${stepId.replace(/\\d+/, parseInt(stepId.split('_')[1]) + 1)}')">–î–∞–ª–µ–µ ‚Üí</button>
            </div>
        `;

        document.body.appendChild(overlay);

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ
        if (stepInfo.element) {
            const element = document.getElementById(stepInfo.element);
            if (element) {
                const rect = element.getBoundingClientRect();
                const highlight = overlay.querySelector('.tutorial-highlight');
                highlight.style.left = rect.left - 4 + 'px';
                highlight.style.top = rect.top - 4 + 'px';
                highlight.style.width = rect.width + 8 + 'px';
                highlight.style.height = rect.height + 8 + 'px';
            }
        }

        console.log(`üßë‚Äçüè´ Tutorial step ${stepId} shown`);
    }

    /**
     * –ü–†–û–í–ï–†–ò–¢–¨ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ –ò –ü–û–ö–ê–ó–ê–¢–¨ –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø
     */
    checkConfiguration() {
        const config = window.CONFIG;
        const warnings = [];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (!config || !config.BOT_TOKEN || config.BOT_TOKEN === "YOUR_BOT_TOKEN_HERE") {
            warnings.push({
                type: 'bot_token',
                title: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞',
                message: 'BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ config.js',
                element: 'editBotsBtn',
                severity: 'critical'
            });
        }

        if (!config || !config.ADMIN_ID || config.ADMIN_ID === "PLACEHOLDER_ADMIN_ID") {
            warnings.push({
                type: 'admin_id',
                title: '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π Telegram ID',
                message: 'ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π ID –∫–æ–º–∞–Ω–¥–æ–π /start –∫ –±–æ—Ç—É @userinfobot',
                element: 'compact-header',
                severity: 'critical'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–æ—Ç–æ–≤ –≤ localStorage
        try {
            const savedBots = localStorage.getItem('telegram_sender_bots');
            const bots = savedBots ? JSON.parse(savedBots) : [];
            if (bots.length === 0) {
                warnings.push({
                    type: 'no_bots',
                    title: '–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã',
                    message: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.',
                    element: 'editBotsBtn',
                    severity: 'high'
                });
            }
        } catch (error) {
            console.warn('Error checking saved bots:', error);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        this.showConfigurationWarnings(warnings);

        console.log('üîç Configuration check completed');
        return warnings;
    }

    /**
     * –ü–û–ö–ê–ó–ê–¢–¨ –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
     */
    showConfigurationWarnings(warnings) {
        if (warnings.length === 0) return;

        // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (–ø–æ—Å–ª–µ —à–∞–ø–∫–∏)
        const header = document.querySelector('.compact-header');
        if (!header) return;

        let warningContainer = document.querySelector('.config-warnings');
        if (!warningContainer) {
            warningContainer = document.createElement('div');
            warningContainer.className = 'config-warnings';
            header.insertAdjacentElement('afterend', warningContainer);
        }

        warningContainer.innerHTML = '';

        warnings.forEach(warning => {
            const warningDiv = document.createElement('div');
            warningDiv.className = `config-warning ${warning.severity}`;

            warningDiv.innerHTML = `
                <div class="warning-content">
                    <h4>${warning.title}</h4>
                    <p>${warning.message}</p>
                    ${warning.element ? `<button class="config-fix-btn" onclick="document.getElementById('${warning.element}').click()">–ò—Å–ø—Ä–∞–≤–∏—Ç—å</button>` : ''}
                </div>
            `;

            warningContainer.appendChild(warningDiv);
        });

        // –î–µ–ª–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        setTimeout(() => {
            const warningElements = warningContainer.querySelectorAll('.config-warning');
            warningElements.forEach((el, index) => {
                setTimeout(() => {
                    el.classList.add('highlight-config');
                    setTimeout(() => el.classList.remove('highlight-config'), 2000);
                }, index * 500);
            });
        }, 1000);

        console.log(`‚ö†Ô∏è ${warnings.length} configuration warnings shown`);
    }

    /**
     * –£–ë–†–ê–¢–¨ –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø
     */
    clearConfigurationWarnings() {
        const warningContainer = document.querySelector('.config-warnings');
        if (warningContainer) {
            warningContainer.remove();
            console.log('‚ö†Ô∏è Configuration warnings cleared');
        }
    }

    /**
     * –î–û–ë–ê–í–ò–¢–¨ –ü–û–î–°–ö–ê–ó–ö–ò –ù–ê –í–°–ï –û–°–ù–û–í–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´
     */
    addDefaultTooltips() {
        // –ë–æ—Ç—ã
        this.addTooltip('editBotsBtn', '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞', '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ');
        this.addTooltip('editSheetsBtn', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã', '–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Google Sheets –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        this.addTooltip('loadUsersBtn', '–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã');

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        this.addTooltip('selectAllUsersBtn', '–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ—Ö', '–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ—Ö –≤–∏–¥–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∏–ª—å—Ç—Ä–µ');
        this.addTooltip('clearUsersSelectionBtn', '–°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ', '–£–±—Ä–∞—Ç—å –≤—Å–µ –º–µ—Ç–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        this.addTooltip('searchFilter', '–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', '–ò—â–∏—Ç–µ –ø–æ –∏–º–µ–Ω–∏, ID, username –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é');

        // –°–æ–æ–±—â–µ–Ω–∏—è
        this.addTooltip('messageInput', '–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', '–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {first_name} –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏');
        this.addTooltip('addButton', '–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É', '–°–æ–∑–¥–∞–π—Ç–µ inline-–∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º');
        this.addTooltip('insertLinkBtn', '–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É', '–î–æ–±–∞–≤—å—Ç–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');

        // –†–∞—Å—Å—ã–ª–∫–∞
        this.addTooltip('sendBtn', '–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞', '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö');
        this.addTooltip('sendMassBtn', '–ú–∞—Å—Å–æ–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∞', '–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤—Å–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
        this.addTooltip('saveBroadcastTemplateBtn', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω', '–°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤');

        // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        this.addTooltip('scheduleBroadcastBtn', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É', '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏');
        this.addTooltip('cancelScheduleBtn', '–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É');

        console.log('üí° Default tooltips added to all main elements');
    }

    /**
     * –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ü–û–ú–û–©–ò
     */
    init() {
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —á—Ç–æ–±—ã DOM –∑–∞–≥—Ä—É–∑–∏–ª—Å—è)
        setTimeout(() => {
            this.createHelpButton();
            this.addDefaultTooltips();

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π CSS –¥–ª—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
            const style = document.createElement('style');
            style.textContent = `
                .tutorial-overlay {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100vw;
                    height: 100vh;
                    background: rgba(0, 0, 0, 0.8);
                    z-index: 10000;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }

                .tutorial-highlight {
                    position: absolute;
                    border: 2px solid #ff6b35;
                    border-radius: 8px;
                    background: rgba(255, 107, 53, 0.1);
                    animation: pulse 1.5s infinite;
                }

                @keyframes pulse {
                    0%, 100% { transform: scale(1); opacity: 1; }
                    50% { transform: scale(1.02); opacity: 0.8; }
                }

                .tutorial-dialog {
                    background: white;
                    padding: 30px;
                    border-radius: 12px;
                    max-width: 400px;
                    text-align: center;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                }

                .tutorial-step {
                    font-size: 18px;
                    font-weight: 600;
                    color: #007bff;
                    margin-bottom: 15px;
                }

                .tutorial-message {
                    font-size: 14px;
                    color: #333;
                    line-height: 1.5;
                    margin-bottom: 20px;
                }

                .tutorial-next {
                    background: #28a745;
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    border-radius: 6px;
                    font-size: 14px;
                    font-weight: 600;
                    cursor: pointer;
                    transition: background 0.2s;
                }

                .tutorial-next:hover {
                    background: #218838;
                }
            `;
            document.head.appendChild(style);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                this.checkConfiguration();
            }, 3000);

        }, 1000);
    }
}

/* =========================================== */
/* TAB SYNCHRONIZATION - –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ú–ï–ñ–î–£ –¢–ê–ë–ê–ú–ò */
/* =========================================== */

class TabSyncManager {
    constructor(mainApp) {
        this.mainApp = mainApp;
        this.channel = null;
        this.tabId = this.generateTabId();
        this.isMaster = false;
        this.lastSync = Date.now();

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        this.syncState = {
            selectedUsers: new Set(),
            filters: {},
            theme: 'default',
            currentBot: null,
            currentSheet: null
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        this.init();
        console.log(`üîÑ TabSyncManager initialized (Tab ID: ${this.tabId})`);
    }

    /**
     * –ì–ï–ù–ï–†–ê–¶–ò–Ø –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û ID –î–õ–Ø –¢–ï–ö–£–©–ï–ô –í–ö–õ–ê–î–ö–ò
     */
    generateTabId() {
        return `tab_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    /**
     * –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
     */
    init() {
        // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        try {
            this.channel = new BroadcastChannel('telegram_sender_tabs');

            // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫
            this.channel.onmessage = (event) => {
                this.handleMessage(event.data);
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è master —Ç–∞–±–∞
            this.channel.postMessage({
                type: 'HELLO',
                tabId: this.tabId,
                timestamp: Date.now()
            });

            // –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            window.addEventListener('beforeunload', () => {
                this.channel.postMessage({
                    type: 'BYE',
                    tabId: this.tabId,
                    timestamp: Date.now()
                });
            });

            console.log('‚úÖ Tab synchronization initialized');

        } catch (error) {
            console.warn('‚ùå Failed to initialize tab sync:', error);
            // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ BroadcastChannel
            this.initFallbackSync();
        }
    }

    /**
     * –ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –ë–†–ê–£–ó–ï–†–û–í –ë–ï–ó BROADCAST CHANNEL
     */
    initFallbackSync() {
        console.log('üîÑ Using fallback localStorage sync');

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º localStorage —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        window.addEventListener('storage', (event) => {
            if (event.key === 'telegram_sender_tab_sync') {
                try {
                    const data = JSON.parse(event.newValue);
                    this.handleFallbackMessage(data);
                } catch (error) {
                    console.warn('‚ùå Failed to parse fallback sync data:', error);
                }
            }
        });

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫
        setInterval(() => {
            const otherTabs = this.getOtherTabs();
            if (otherTabs.length === 0) {
                this.syncFromStorage();
            }
        }, 5000);
    }

    /**
     * –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –û–¢ –î–†–£–ì–ò–• –í–ö–õ–ê–î–û–ö
     */
    handleMessage(message) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (message.tabId === this.tabId) return;

        switch (message.type) {
            case 'HELLO':
                console.log(`üì¨ HELLO from tab ${message.tabId}`);

                // –û—Ç–≤–µ—á–∞–µ–º –Ω–æ–≤—ã–º —Ç–∞–±–∞–º —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
                if (this.isMaster) {
                    this.sendCurrentState();
                }
                break;

            case 'SYNC_STATE':
                this.receiveState(message.state, message.tabId);
                break;

            case 'SELECT_USERS':
                this.receiveSelectedUsers(message.users, message.tabId);
                break;

            case 'APPLY_FILTERS':
                this.receiveFilters(message.filters, message.tabId);
                break;

            case 'CHANGE_THEME':
                this.receiveTheme(message.theme, message.tabId);
                break;

            case 'BOT_CHANGED':
                this.receiveBotChange(message.botId, message.sheetId, message.tabId);
                break;

            case 'BYE':
                console.log(`üëã BYE from tab ${message.tabId}`);
                break;

            default:
                console.log(`üì¨ Unknown message type: ${message.type}`);
        }
    }

    /**
     * –ü–†–ò–ï–ú –ü–û–õ–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø –û–¢ MASTER –í–ö–õ–ê–î–ö–ò
     */
    receiveState(state, fromTabId) {
        console.log(`üì• Received full state from tab ${fromTabId}`);

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.receiveSelectedUsers(state.selectedUsers, fromTabId);

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        this.receiveFilters(state.filters, fromTabId);

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—É
        this.receiveTheme(state.theme, fromTabId);

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        this.receiveBotChange(state.currentBot, state.currentSheet, fromTabId);
    }

    /**
     * –ü–†–ò–ï–ú –°–ü–ò–°–ö–ê –í–´–ë–†–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
     */
    receiveSelectedUsers(userIds, fromTabId) {
        console.log(`üë• Received ${userIds.length} selected users from tab ${fromTabId}`);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –≤ Set
        const newSelected = new Set(userIds);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const hasChanges = !this.equalSets(this.syncState.selectedUsers, newSelected);

        if (hasChanges) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            this.mainApp.selectedUsers = newSelected;
            this.syncState.selectedUsers = new Set(newSelected);

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.mainApp.updateUI();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.mainApp.showStatus(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: –≤—ã–±—Ä–∞–Ω–æ ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, 'info');

            window.loadingManager?.showToast(
                `–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (${userIds.length})`,
                'info',
                3000
            );
        }
    }

    /**
     * –ü–†–ò–ï–ú –ù–ê–°–¢–†–û–ï–ö –§–ò–õ–¨–¢–†–û–í
     */
    receiveFilters(filters, fromTabId) {
        console.log(`üîç Received filters from tab ${fromTabId}:`, filters);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Ñ–æ—Ä–º–∞–º
        const searchInput = document.getElementById('searchFilter');
        if (searchInput && filters.search !== undefined) {
            searchInput.value = filters.search;
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ–∫–±–æ–∫—Å—ã —Å—Ç–∞—Ç—É—Å–æ–≤
        const statusCheckboxes = ['statusTrial', 'statusNewSub', 'statusCanceled', 'statusKicked'];
        statusCheckboxes.forEach(cbId => {
            const cb = document.getElementById(cbId);
            const status = cbId.replace('status', '').toLowerCase();
            if (cb && typeof filters.statuses === 'object') {
                cb.checked = filters.statuses[status] === true;
            }
        });

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ–∫–±–æ–∫—Å—ã Trial Calls
        const trialCheckboxes = ['trialCallsLess0', 'trialCallsLess5', 'trialCallsMid', 'trialCallsGreater20', 'trialCallsEquals20'];
        trialCheckboxes.forEach(cbId => {
            const cb = document.getElementById(cbId);
            const filter = cbId.replace('trialCalls', '').toLowerCase();
            if (cb && typeof filters.trialCalls === 'object') {
                cb.checked = filters.trialCalls[filter] === true;
            }
        });

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ–∫–±–æ–∫—Å—ã —è–∑—ã–∫–æ–≤
        const languageCheckboxes = ['languageRu', 'languageEn', 'languageEs', 'languageFr', 'languageDe', 'languageIt', 'languagePt', 'languageZh', 'languageAr', 'languageJa', 'languagePl', 'languageTr', 'languageKo', 'languageHi', 'languageFa', 'languageOther'];
        languageCheckboxes.forEach(cbId => {
            const cb = document.getElementById(cbId);
            const lang = cbId.replace('language', '').toLowerCase();
            if (cb && typeof filters.languages === 'object') {
                cb.checked = filters.languages[lang] === true;
            }
        });

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        this.mainApp.applyFilters();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.syncState.filters = filters;
    }

    /**
     * –ü–†–ò–ï–ú –ù–ê–°–¢–†–û–ô–ö–ò –¢–ï–ú–´
     */
    receiveTheme(theme, fromTabId) {
        console.log(`üé® Received theme change ${theme} from tab ${fromTabId}`);

        if (this.syncState.theme !== theme) {
            this.syncState.theme = theme;
            this.mainApp.setTheme(theme);

            window.loadingManager?.showToast(
                `–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${theme}`,
                'info',
                2000
            );
        }
    }

    /**
     * –ü–†–ò–ï–ú –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ë–û–¢–ê
     */
    receiveBotChange(botId, sheetId, fromTabId) {
        console.log(`ü§ñ Received bot change ${botId}/${sheetId} from tab ${fromTabId}`);

        if (this.syncState.currentBot !== botId || this.syncState.currentSheet !== sheetId) {
            this.syncState.currentBot = botId;
            this.syncState.currentSheet = sheetId;

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            const botSelect = document.getElementById('botsList');
            if (botSelect) botSelect.value = botId || '';

            const sheetSelect = document.getElementById('sheetsList');
            if (sheetSelect) sheetSelect.value = sheetId || '';

            // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            if (this.mainApp.modules?.bots) {
                if (botId) this.mainApp.modules.bots.selectBot(botId);
                if (sheetId) this.mainApp.modules.bots.selectSheet(sheetId);
            }

            window.loadingManager?.showToast(
                `–ë–æ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω`,
                'info',
                2000
            );
        }
    }

    /**
     * –û–¢–ü–†–ê–í–ö–ê –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø –î–†–£–ì–ò–ú –í–ö–õ–ê–î–ö–ê–ú
     */
    sendCurrentState() {
        const state = {
            selectedUsers: Array.from(this.mainApp.selectedUsers),
            filters: this.collectCurrentFilters(),
            theme: this.mainApp.modules?.settings?.currentTheme || 'default',
            currentBot: this.mainApp.currentBot,
            currentSheet: this.mainApp.currentSheet
        };

        this.broadcast({
            type: 'SYNC_STATE',
            state: state,
            timestamp: Date.now()
        });

        console.log('üì§ Sent current state to other tabs');
    }

    /**
     * –û–¢–ü–†–ê–í–ö–ê –í–´–ë–†–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
     */
    sendSelectedUsers() {
        const users = Array.from(this.mainApp.selectedUsers);

        this.broadcast({
            type: 'SELECT_USERS',
            users: users,
            timestamp: Date.now()
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.syncState.selectedUsers = new Set(users);

        console.log(`üë• Sent ${users.length} selected users to other tabs`);
    }

    /**
     * –û–¢–ü–†–ê–í–ö–ê –§–ò–õ–¨–¢–†–û–í
     */
    sendFilters() {
        const filters = this.collectCurrentFilters();

        this.broadcast({
            type: 'APPLY_FILTERS',
            filters: filters,
            timestamp: Date.now()
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.syncState.filters = filters;

        console.log('üîç Sent filters to other tabs');
    }

    /**
     * –û–¢–ü–†–ê–í–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¢–ï–ú–´
     */
    sendTheme(theme) {
        this.broadcast({
            type: 'CHANGE_THEME',
            theme: theme,
            timestamp: Date.now()
        });

        this.syncState.theme = theme;
        console.log(`üé® Sent theme change ${theme} to other tabs`);
    }

    /**
     * –û–¢–ü–†–ê–í–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ë–û–¢–ê
     */
    sendBotChange(botId, sheetId) {
        this.broadcast({
            type: 'BOT_CHANGED',
            botId: botId,
            sheetId: sheetId,
            timestamp: Date.now()
        });

        this.syncState.currentBot = botId;
        this.syncState.currentSheet = sheetId;
        console.log(`ü§ñ Sent bot change ${botId}/${sheetId} to other tabs`);
    }

    /**
     * –°–ë–û–† –¢–ï–ö–£–©–ò–• –ù–ê–°–¢–†–û–ï–ö –§–ò–õ–¨–¢–†–û–í
     */
    collectCurrentFilters() {
        return {
            search: document.getElementById('searchFilter')?.value || '',

            statuses: {
                trial: document.getElementById('statusTrial')?.checked || false,
                newsub: document.getElementById('statusNewSub')?.checked || false,
                canceled: document.getElementById('statusCanceled')?.checked || false,
                kicked: document.getElementById('statusKicked')?.checked || false
            },

            trialCalls: {
                less0: document.getElementById('trialCallsLess0')?.checked || false,
                less5: document.getElementById('trialCallsLess5')?.checked || false,
                mid: document.getElementById('trialCallsMid')?.checked || false,
                greater20: document.getElementById('trialCallsGreater20')?.checked || false,
                equals20: document.getElementById('trialCallsEquals20')?.checked || false
            },

            languages: {
                ru: document.getElementById('languageRu')?.checked || false,
                en: document.getElementById('languageEn')?.checked || false,
                es: document.getElementById('languageEs')?.checked || false,
                fr: document.getElementById('languageFr')?.checked || false,
                de: document.getElementById('languageDe')?.checked || false,
                it: document.getElementById('languageIt')?.checked || false,
                pt: document.getElementById('languagePt')?.checked || false,
                zh: document.getElementById('languageZh')?.checked || false,
                ar: document.getElementById('languageAr')?.checked || false,
                ja: document.getElementById('languageJa')?.checked || false,
                pl: document.getElementById('languagePl')?.checked || false,
                tr: document.getElementById('languageTr')?.checked || false,
                ko: document.getElementById('languageKo')?.checked || false,
                hi: document.getElementById('languageHi')?.checked || false,
                fa: document.getElementById('languageFa')?.checked || false,
                other: document.getElementById('languageOther')?.checked || false
            },

            customLanguage: document.getElementById('customLanguageFilter')?.value || ''
        };
    }

    /**
     * –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –í –î–†–£–ì–ò–ï –í–ö–õ–ê–î–ö–ò
     */
    broadcast(message) {
        message.tabId = this.tabId;

        if (this.channel) {
            this.channel.postMessage(message);
        } else {
            // Fallback —á–µ—Ä–µ–∑ localStorage
            this.broadcastFallback(message);
        }
    }

    /**
     * FALLBACK –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ß–ï–†–ï–ó LOCALSTORAGE
     */
    broadcastFallback(message) {
        try {
            localStorage.setItem('telegram_sender_tab_sync', JSON.stringify(message));

            // –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É—Å–ø–µ–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å
            setTimeout(() => {
                localStorage.removeItem('telegram_sender_tab_sync');
            }, 10);
        } catch (error) {
            console.warn('‚ùå Fallback broadcast failed:', error);
        }
    }

    /**
     * –û–ë–†–ê–ë–û–¢–ö–ê FALLBACK –°–û–û–ë–©–ï–ù–ò–ô
     */
    handleFallbackMessage(data) {
        // –ò—Å–∫–ª—é—á–∞–µ–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (data.tabId === this.tabId) return;

        this.handleMessage(data);
    }

    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –î–†–£–ì–ò–• –í–ö–õ–ê–î–û–ö
     */
    getOtherTabs() {
        // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ localStorage
        return [];
    }

    /**
     * –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ò–ó LOCALSTORAGE (–î–õ–Ø –ù–ê–ß–ê–õ–¨–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò)
     */
    syncFromStorage() {
        try {
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const savedSelected = localStorage.getItem('telegram_sender_selected_users');
            if (savedSelected) {
                const users = JSON.parse(savedSelected);
                if (Array.isArray(users)) {
                    this.receiveSelectedUsers(users, 'storage');
                }
            }

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
            const savedTheme = localStorage.getItem('telegram_sender_theme');
            if (savedTheme) {
                this.receiveTheme(savedTheme, 'storage');
            }

        } catch (error) {
            console.warn('‚ùå Failed to sync from storage:', error);
        }
    }

    /**
     * –ü–†–û–ö–ï–†–ö–ê –†–ê–í–ï–ù–°–¢–í–ê SET'–û–í
     */
    equalSets(setA, setB) {
        if (setA.size !== setB.size) return false;
        return [...setA].every(item => setB.has(item));
    }

    /**
     * –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í –ü–†–ò –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ò
     */
    destroy() {
        if (this.channel) {
            this.channel.close();
        }
        console.log('üîÑ TabSyncManager destroyed');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let tabSyncInitialized = false;
let helpSystemInitialized = false;

function initSystemsAfterLoad() {
    if (!window.telegramSender || !window.telegramSender.isInited) {
        // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        setTimeout(initSystemsAfterLoad, 100);
        return;
    }

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TabSyncManager
    window.tabSync = new TabSyncManager(window.telegramSender);

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä HelpSystem
    window.helpSystem = new HelpSystem(window.telegramSender);

    tabSyncInitialized = true;
    helpSystemInitialized = true;

    console.log('‚úÖ All systems initialized successfully');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º
initSystemsAfterLoad();

/* =========================================== */
/* –¢–µ–ª–µ–≥—Ä–∞–º Sender - –ü–û–õ–ù–ê–Ø –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø */
/* GitHub Pages compatible */
/* =========================================== */

class TelegramSender {
    constructor() {
        console.log('üöÄ Initializing TelegramSender...');

        // –ë–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        this.isAdmin = false;
        this.isInited = false;
        this.sdkReady = false;
        this.config = window.CONFIG || {};

        // –î–∞–Ω–Ω—ã–µ
        this.users = [];
        this.filteredUsers = [];
        this.selectedUsers = new Set();
        this.templates = [];
        this.linkTemplates = [];
        this.bots = [];
        this.currentBot = null;
        this.currentSheet = null;
        this.broadcastHistory = [];
        this.userMessageHistory = {};
        this.notificationSoundSettings = {
            frequency: 800,
            duration: 300,
            waveType: 'sine',
            volume: 0.1
        };
        this.linkAutoSave = true;

        // –ú–æ–¥—É–ª–∏
        this.modules = {};

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
        this.initModules();
        this.initTelegram();
    }

    initModules() {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ HTML –ø–æ—Ä—è–¥–∫—É
        this.register('storage', TelegramStorage);
        this.register('messaging', TelegramMessagingAdvanced);
        this.register('users', TelegramUsersAdvanced); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –≤–µ—Ä—Å–∏—é
        this.register('userlists', TelegramUserLists);
        this.register('bots', TelegramBots);
        this.register('links', TelegramLinks);
        this.register('buttons', TelegramButtons);
        this.register('settings', TelegramSettings);
        this.register('notifications', TelegramNotifications);

        console.log(`üì¶ Registered ${Object.keys(this.modules).length} modules`);
    }

    register(name, cls) {
        try {
            this.modules[name] = new cls(this);
            console.log(`‚úÖ Module ${name} loaded`);
        } catch (error) {
            console.error(`‚ùå Failed to load ${name}:`, error);
        }
    }

    initTelegram() {
        this.checkTelegramSDK()
            .then(() => this.checkAdminAccess())
            .then(() => this.initUI())
            .then(() => this.loadInitialData())
            .then(() => {
                this.isInited = true;
                console.log('‚úÖ TelegramSender fully initialized');
            })
            .catch(error => {
                console.error('‚ùå Initialization failed:', error);
                this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ' + error.message);
            });
    }

    async checkTelegramSDK() {
        return new Promise((resolve, reject) => {
            if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
                // –ù–∞—Å—Ç–æ—è—â–∏–π SDK –∑–∞–≥—Ä—É–∂–µ–Ω
                Telegram.WebApp.ready();
                Telegram.WebApp.expand();
                this.sdkReady = true;
                resolve();
                return;
            }

            // üõ†Ô∏è –ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ë–ï–ó SDK
            console.warn('üîß Telegram SDK –Ω–µ –Ω–∞–π–¥–µ–Ω - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');

            window.Telegram = {
                WebApp: {
                    ready: () => console.log('üîß Mock Telegram.WebApp.ready()'),
                    expand: () => console.log('üîß Mock Telegram.WebApp.expand()'),
                    close: () => console.log('üîß Mock Telegram.WebApp.close()'),
                    initDataUnsafe: {
                        user: {
                            id: 123456789,        // –¢–µ—Å—Ç–æ–≤—ã–π ID
                            username: 'test_user',
                            first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
                            last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                        }
                    },
                    themeParams: {},
                    colorScheme: 'light'
                }
            };

            this.sdkReady = true;
            resolve();
        });
    }

    async checkAdminAccess() {
        const config = this.config;

        if (!config.ADMIN_ID) {
            throw new Error('CONFIG.ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        console.warn('‚ö†Ô∏è DEVMODE: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
        if (config.ADMIN_ID !== "PLACEHOLDER_ADMIN_ID") {
            this.isAdmin = true;
            console.log('‚úÖ Admin access granted');
        } else {
            throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
        }
    }

    initUI() {
        // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏/–æ—à–∏–±–∫–∏
        const loading = document.querySelector('.loading-screen');
        const error = document.querySelector('.access-denied-screen');
        const main = document.querySelector('.main-app');

        if (loading) loading.classList.add('hidden');
        if (error) error.classList.add('hidden');
        if (main) main.classList.add('animate');

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º
        if (this.modules.settings) {
            this.modules.settings.loadSavedTheme();
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
        Object.values(this.modules).forEach(mod => {
            if (mod.init) mod.init();
        });

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.setupEventListeners();
        this.initModalEvents();

        console.log('üé® UI initialized');
    }

    setupEventListeners() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        this.bindBtn('loadUsersBtn', () => this.modules.users?.reloadUsersData?.());
        this.bindBtn('sendBtn', () => this.modules.messaging?.startSimpleBroadcast?.());
        this.bindBtn('sendMassBtn', () => this.modules.messaging?.startMassBroadcast?.());

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏
        this.bindBtn('editBotsBtn', () => this.modules.bots?.showBotsWizard?.());
        this.bindBtn('editSheetsBtn', () => this.modules.bots?.showSheetsWizard?.());
        this.bindBtn('saveBotBtn', () => this.modules.bots?.addBotFromWizard?.());
        this.bindBtn('addSheetBtn', () => this.modules.bots?.addSheetFromWizard?.());
        this.bindBtn('cancelSheetsWizardBtn', () => this.closeAllModals());

        // –®–∞–±–ª–æ–Ω—ã –∏ —Å—Å—ã–ª–∫–∏
        this.bindBtn('insertLinkBtn', () => this.showModal('linkWizard'));
        this.bindBtn('insertLinkConfirmBtn', () => this.insertLink());
        this.bindBtn('editTemplatesBtn', () => this.showModal('templateWizard'));
        this.bindBtn('addTemplateBtn', () => this.addTemplate());

        // –ö–Ω–æ–ø–∫–∏ –∏ –º–µ–¥–∏–∞
        this.bindBtn('addButton', () => this.addButton());
        this.bindBtn('clearButtons', () => this.clearButtons());

        // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        this.bindBtn('scheduleBroadcastBtn', () => this.modules.messaging?.scheduleCurrentBroadcast?.());
        this.bindBtn('cancelScheduleBtn', () => this.modules.messaging?.cancelScheduledBroadcast?.());

        // –í—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏
        this.bindSelect('botsList', (e) => this.modules.bots?.selectBot?.(e.target.value));
        this.bindSelect('sheetsList', (e) => this.modules.bots?.selectSheet?.(e.target.value));
        this.bindSelect('templateSelect', (e) => this.applyTemplate(e.target.value));

        // –§–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.bindInput('searchFilter', (e) => this.applyFilters());
        this.bindStatusCheckbox('statusTrial', () => this.applyFilters());
        this.bindStatusCheckbox('statusNewSub', () => this.applyFilters());
        this.bindStatusCheckbox('statusCanceled', () => this.applyFilters());
        this.bindStatusCheckbox('statusKicked', () => this.applyFilters());

        // –§–∏–ª—å—Ç—Ä—ã –ø–æ Trial Calls
        this.bindStatusCheckbox('trialCallsLess0', () => this.applyFilters());
        this.bindStatusCheckbox('trialCallsLess5', () => this.applyFilters());
        this.bindStatusCheckbox('trialCallsMid', () => this.applyFilters());
        this.bindStatusCheckbox('trialCallsGreater20', () => this.applyFilters());
        this.bindStatusCheckbox('trialCallsEquals20', () => this.applyFilters());

        // –§–ò–õ–¨–¢–†–´ –ü–û –Ø–ó–´–ö–ê–ú - –î–û–ë–ê–í–õ–ï–ù–´ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
        this.bindStatusCheckbox('languageRu', () => this.applyFilters());
        this.bindStatusCheckbox('languageEn', () => this.applyFilters());
        this.bindStatusCheckbox('languageEs', () => this.applyFilters());
        this.bindStatusCheckbox('languageFr', () => this.applyFilters());
        this.bindStatusCheckbox('languageDe', () => this.applyFilters());
        this.bindStatusCheckbox('languageIt', () => this.applyFilters());
        this.bindStatusCheckbox('languagePt', () => this.applyFilters());
        this.bindStatusCheckbox('languageZh', () => this.applyFilters());
        this.bindStatusCheckbox('languageAr', () => this.applyFilters());
        this.bindStatusCheckbox('languageJa', () => this.applyFilters());
        this.bindStatusCheckbox('languagePl', () => this.applyFilters());
        this.bindStatusCheckbox('languageTr', () => this.applyFilters());
        this.bindStatusCheckbox('languageKo', () => this.applyFilters());
        this.bindStatusCheckbox('languageHi', () => this.applyFilters());
        this.bindStatusCheckbox('languageFa', () => this.applyFilters());
        this.bindStatusCheckbox('languageOther', () => this.applyFilters());
        this.bindInput('customLanguageFilter', (e) => this.applyFilters());

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞
        this.bindBtn('testNotificationBtn', () => this.modules.notifications?.showTestNotification?.());
        this.bindBtn('saveSoundSettingsBtn', () => this.saveSoundSettings());

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏
        this.bindBtn('selectAllUsersBtn', () => this.selectAllUsers(true));
        this.bindBtn('clearUsersSelectionBtn', () => this.selectAllUsers(false));
        this.bindBtn('saveToListBtn', () => this.saveSelectedToList());
        this.bindBtn('manageListsBtn', () => this.showModal('userListsWizard'));

        // –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç
        this.bindBtn('exportHistoryCSVBtn', () => this.exportHistory('csv'));
        this.bindBtn('exportHistoryPDFBtn', () => this.exportHistory('pdf'));
        this.bindBtn('runLocalStorageDiagnostic', () => this.runDiagnostic());
        this.bindBtn('importUsersBtn', (e) => this.importUsers(e.target.previousElementSibling.files[0]));

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–≤—É–∫–∏
        this.bindBtn('requestNotificationsBtn', () => this.modules.notifications?.requestNotificationPermission?.());
        this.bindBtn('checkNotificationSupportBtn', () => this.modules.notifications?.checkNotificationSupport?.());
        this.bindBtn('soundSettingsBtn', () => this.modules.notifications?.showSoundSettingsWizard?.());
        this.bindBtn('testSoundBtn', () => this.modules.notifications?.playNotificationSound?.());
        this.bindBtn('resetSoundSettingsBtn', () => this.modules.notifications?.resetSoundSettings?.());
        this.bindBtn('cancelSoundSettingsBtn', () => this.closeAllModals());

        // –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.bindBtn('clearUserHistoryBtn', () => this.clearUserHistory());

        // –®–∞–±–ª–æ–Ω—ã —Ä–∞—Å—Å—ã–ª–æ–∫
        this.bindBtn('saveBroadcastTemplateBtn', () => this.modules.messaging?.createBroadcastTemplateFromWizard?.());
        this.bindBtn('createBroadcastTemplateBtn', () => this.modules.messaging?.createBroadcastTemplateFromWizard?.());
        this.bindBtn('cancelBroadcastWizardBtn', () => this.closeAllModals());

        // –ú–µ–¥–∏–∞
        this.bindBtn('clearMediaBtn', () => this.modules.messaging?.clearMediaFile?.());

        // –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.bindBtn('selectAllStatuses', () => this.modules.users?.selectAllStatuses?.());
        this.bindBtn('resetFilters', () => this.modules.users?.resetAllFilters?.());

        console.log('üîó Event listeners connected');
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏–≤—è–∑–∫–∏
    bindBtn(btnId, handler) {
        const btn = document.getElementById(btnId);
        if (btn) btn.addEventListener('click', handler);
    }

    bindSelect(selId, handler) {
        const sel = document.getElementById(selId);
        if (sel) sel.addEventListener('change', handler);
    }

    bindInput(inpId, handler) {
        const inp = document.getElementById(inpId);
        if (inp) inp.addEventListener('input', handler);
    }

    bindStatusCheckbox(cbId, handler) {
        const cb = document.getElementById(cbId);
        if (cb) cb.addEventListener('change', handler);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    async loadInitialData() {
        // –ò—Å—Ç–æ—Ä–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.modules.storage?.loadBroadcastHistory?.();
        this.modules.storage?.loadUserMessageHistory?.();
        this.modules.storage?.loadBots?.();

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –±–æ—Ç–æ–≤
        this.restoreBotSelection();

        console.log('‚úÖ Initial data loaded');
    }

    restoreBotSelection() {
        try {
            const savedBotId = localStorage.getItem('telegram_sender_current_bot');
            const savedSheetId = localStorage.getItem('telegram_sender_current_sheet');

            if (savedBotId && this.modules.bots) {
                this.modules.bots.selectBot(savedBotId);
                if (savedSheetId) {
                    this.modules.bots.selectSheet(savedSheetId);
                }
            }
        } catch (error) {
            console.warn('Failed to restore bot selection:', error);
        }
    }

    /**
     * –î–ï–õ–ê–ô –ó–ù–ê–ß–ï–ù–ò–ï –ó–ê–î–ï–†–ñ–ö–ò –ú–ï–ñ–î–£ –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏
    saveNewBot() {
        const nameInput = document.getElementById('newBotName');
        const tokenInput = document.getElementById('newBotToken');

        const name = nameInput?.value?.trim();
        const token = tokenInput?.value?.trim();

        if (!name || !token) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
            return;
        }

        if (this.modules.bots?.addBot) {
            this.modules.bots.addBot(name, token);
        }

        this.hideModal('botsWizard');
    }

    // –ú–µ—Ç–æ–¥—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —à–∞–±–ª–æ–Ω–æ–≤
    applyTemplate(templateId) {
        if (!templateId) return;

        const template = this.templates.find(t => t.id === templateId);
        if (!template) return;

        const messageInput = document.getElementById('messageInput');
        if (messageInput) {
            messageInput.value = template.text;
        }
    }

    addTemplate() {
        const nameInput = document.getElementById('newTemplateName');
        const textInput = document.getElementById('newTemplateText');

        const name = nameInput?.value?.trim();
        const text = textInput?.value?.trim();

        if (!name || !text) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
            return;
        }

        if (this.modules.messaging?.addTemplate) {
            this.modules.messaging.addTemplate(name, text);
        }

        this.hideModal('templateWizard');
    }

    insertLink() {
        const textInput = document.getElementById('linkText');
        const urlInput = document.getElementById('linkUrl');

        const text = textInput?.value?.trim();
        const url = urlInput?.value?.trim();

        if (!text || !url) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω —Å—Å—ã–ª–∫–∏
        this.modules.messaging?.addLinkTemplate?.(text, url);

        // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageInput = document.getElementById('messageInput');
        if (messageInput) {
            const htmlLink = `<a href="${url}">${text}</a>`;
            messageInput.value += htmlLink;
        }

        this.hideModal('linkWizard');
    }

    // –ú–µ—Ç–æ–¥—ã –∫–Ω–æ–ø–æ–∫
    addButton() {
        const textInput = document.getElementById('newButtonText');
        const urlInput = document.getElementById('newButtonUrl');

        const text = textInput?.value?.trim();
        const url = urlInput?.value?.trim();

        if (!text) {
            alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏!');
            return;
        }

        if (this.modules.messaging?.addMessageButton) {
            this.modules.messaging.addMessageButton(text, url);
        }
    }

    clearButtons() {
        if (this.modules.messaging?.clearMessageButtons) {
            this.modules.messaging.clearMessageButtons();
        }
    }

    // –ú–µ—Ç–æ–¥—ã –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    selectAllUsers(select = true) {
        const rows = document.querySelectorAll('#usersTableBody input[type="checkbox"]');
        rows.forEach(cb => cb.checked = select);

        this.selectedUsers.clear();
        if (select) {
            rows.forEach(cb => this.selectedUsers.add(cb.dataset.userId));
        }
    }

    saveSelectedToList() {
        const listName = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞:');
        if (!listName?.trim()) return;

        const selectedIds = Array.from(this.selectedUsers);
        if (selectedIds.length === 0) {
            alert('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!');
            return;
        }

        if (this.modules.userlists?.saveSelectedAsNewList) {
            this.modules.userlists.saveSelectedAsNewList(listName, selectedIds);
        }
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    applyFilters() {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        const search = document.getElementById('searchFilter')?.value?.toLowerCase() || '';
        const statusFilters = this.getStatusFilters();
        const trialFilters = this.getTrialFilters();
        const languageFilters = this.getLanguageFilters();

        console.log('üîç Applying filters:', {
            search: search || 'none',
            statuses: statusFilters,
            trialCalls: trialFilters,
            languages: languageFilters
        });

        this.filteredUsers = this.users.filter(user => {
            // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏/ID/username
            if (search) {
                const text = [
                    user.user_id || '',
                    user.first_name || '',
                    user.last_name || '',
                    user.username || ''
                ]
                    .filter(Boolean)
                    .join(' ')
                    .toLowerCase();

                if (!text.includes(search)) return false;
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if (statusFilters.length > 0 && !statusFilters.includes(user.status?.toLowerCase())) {
                return false;
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ Trial Calls
            if (trialFilters.length > 0 && !this.matchesTrialFilter(user, trialFilters)) {
                return false;
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫—É
            if (languageFilters.length > 0) {
                const userLang = (user.language_code || '').toLowerCase();
                if (!languageFilters.includes(userLang)) {
                    return false;
                }
            }

            return true;
        });

        // –õ–æ–≥–∏—Ä—É–µ–º –∏ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ä—É–µ–º
        console.log(`üîç Filtered: ${this.filteredUsers.length}/${this.users.length} users`);
        this.updateUI();
    }

    getStatusFilters() {
        const filters = [];
        const checkboxes = ['statusTrial', 'statusNewSub', 'statusCanceled', 'statusKicked'];

        checkboxes.forEach(id => {
            const cb = document.getElementById(id);
            if (cb?.checked) {
                filters.push(id.replace('status', '').toLowerCase());
            }
        });

        return filters;
    }

    getTrialFilters() {
        const filters = [];
        const checkboxes = ['trialCallsLess0', 'trialCallsLess5', 'trialCallsMid', 'trialCallsGreater20', 'trialCallsEquals20'];

        checkboxes.forEach(id => {
            const cb = document.getElementById(id);
            if (cb?.checked) {
                filters.push(id.replace('trialCalls', '').toLowerCase());
            }
        });

        return filters;
    }

    getLanguageFilters() {
        const filters = [];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫–±–æ–∫—Å—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —è–∑—ã–∫–æ–≤
        const languageCheckboxes = ['languageRu', 'languageEn', 'languageEs', 'languageFr', 'languageDe', 'languageIt', 'languagePt', 'languageZh', 'languageAr', 'languageJa', 'languagePl', 'languageTr', 'languageKo', 'languageHi', 'languageFa', 'languageOther'];
        languageCheckboxes.forEach(id => {
            const cb = document.getElementById(id);
            if (cb?.checked) {
                const lang = id.replace('language', '').toLowerCase();
                filters.push(lang);
            }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —è–∑—ã–∫
        const customLanguageInput = document.getElementById('customLanguageFilter');
        if (customLanguageInput?.value?.trim()) {
            const customLang = customLanguageInput.value.trim().toLowerCase();
            filters.push(customLang);
        }

        return filters;
    }

    matchesTrialFilter(user, trialFilters) {
        if (trialFilters.length === 0) return true;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ –ø–æ—Å–ª–µ –º–∞–ø–ø–∏–Ω–≥–∞ (–≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ 0)
        const trialCalls = parseInt(user.trial_calls) || 0;

        return trialFilters.some(filter => {
            switch (filter) {
                case 'less0':
                    return trialCalls < 0;
                case 'less5':
                    return trialCalls < 5;
                case 'mid':
                    return trialCalls >= 0 && trialCalls <= 20;
                case 'greater20':
                    return trialCalls > 20;
                case 'equals20':
                    return trialCalls === 20;
                default:
                    return false;
            }
        });
    }

    updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (this.modules.users?.renderUsersTable) {
            this.modules.users.renderUsersTable();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        this.updateUserCounts();

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏-—Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        this.updateSelectedUsersMiniList();
    }

    updateUserCounts() {
        const badgeAll = document.getElementById('usersCountBadge');
        const badgeSelected = document.getElementById('usersSelectedBadge');

        if (badgeAll) {
            badgeAll.textContent = `üë• ${this.filteredUsers.length}`;
        }

        if (badgeSelected) {
            badgeSelected.textContent = `‚úÖ ${this.selectedUsers.size}`;
        }
    }

    updateSelectedUsersMiniList() {
        const container = document.getElementById('selectedUsersMiniList');
        if (!container) return;

        if (this.selectedUsers.size === 0) {
            container.innerHTML = '<div style="color: var(--text-secondary);">–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>';
            return;
        }

        const selectedData = this.filteredUsers.filter(u => this.selectedUsers.has(u.user_id));

        container.innerHTML = selectedData.map(user => `
            <div>${user.first_name || user.username || user.user_id}
            <button onclick="window.telegramSender.selectedUsers.delete('${user.user_id}'); window.telegramSender.updateUI()">√ó</button>
            </div>
        `).join('');
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    exportHistory(format = 'csv') {
        if (format === 'csv') {
            this.exportCSV();
        } else if (format === 'pdf') {
            // –î–ª—è PDF –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
            console.log('PDF export not yet implemented');
        }
    }

    exportCSV() {
        // –ü—Ä–æ—Å—Ç–æ–π CSV —ç–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
        const headers = ['Timestamp', 'Message', 'User Count', 'Status'];
        const rows = this.broadcastHistory.map(item => [
            new Date(item.timestamp).toLocaleString(),
            item.message.substring(0, 50) + '...',
            item.sentCount || 0,
            item.status
        ]);

        const csv = [headers, ...rows].map(r => r.map(c => `"${c}"`).join(',')).join('\n');

        const blob = new Blob([csv], { type: 'text/csv' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `telegram_sender_history_${new Date().toISOString().split('T')[0]}.csv`;
        a.click();
    }

    runDiagnostic() {
        console.log('üîç Running diagnostic...');

        if (this.modules.storage?.diagnoseStorage) {
            this.modules.storage.diagnoseStorage();
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π
        console.log('üì¶ Module status:', Object.keys(this.modules));

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        console.log('üìä Data status:', {
            users: this.users.length,
            templates: this.templates.length,
            bots: this.bots.length,
            history: this.broadcastHistory.length
        });
    }

    async importUsers(file) {
        if (!file) return;

        console.log('üì• Importing users from file...');

        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        console.log('CSV import not yet implemented');
    }

    // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    clearUserHistory() {
        const userId = document.getElementById('userHistoryTitle')?.dataset?.userId ||
                      document.getElementById('userHistoryWizardHeader')?.dataset?.userId;

        if (!userId) {
            console.warn('‚ùå Cannot clear user history: userId not found');
            alert('–ù–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }

        if (!confirm(`–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}?`)) {
            return;
        }

        // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.userMessageHistory && this.userMessageHistory[userId]) {
            delete this.userMessageHistory[userId];
            this.modules.storage?.saveUserMessageHistory?.();
            console.log(`üóëÔ∏è Cleared message history for user ${userId}`);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
            const userHistoryContent = document.getElementById('userHistoryContent');
            if (userHistoryContent) {
                userHistoryContent.innerHTML = `
                    <div style="text-align: center; color: var(--text-secondary); padding: 40px;">
                        üì≠ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω–∞
                    </div>
                `;
            }

            this.addToLog(`–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ—á–∏—â–µ–Ω–∞`);
        } else {
            alert('–ò—Å—Ç–æ—Ä–∏—è —É–∂–µ –ø—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
    }

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π backdrop
    showModal(modalId) {
        const backdrop = document.getElementById('modalBackdrop');
        if (backdrop) {
            backdrop.classList.add('show');
        }
    }

    hideModal(modalId) {
        const backdrop = document.getElementById('modalBackdrop');
        if (backdrop) {
            backdrop.classList.remove('show');
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞
    saveSoundSettings() {
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º
        const frequency = parseInt(document.getElementById('frequencySlider')?.value) || 800;
        const duration = parseInt(document.getElementById('durationSlider')?.value) || 300;
        const volume = parseFloat(document.getElementById('volumeSlider')?.value) / 100 || 0.1;
        const waveType = document.getElementById('waveTypeSelect')?.value || 'sine';

        this.notificationSoundSettings = { frequency, duration, volume, waveType };

        if (this.modules.storage?.saveSoundSettings) {
            this.modules.storage.saveSoundSettings();
        }

        this.addToLog('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        this.hideModal('soundSettingsWizard');
    }

    addToLog(msg) {
        const log = document.getElementById('logContainer');
        if (log) {
            const time = new Date().toLocaleTimeString();
            log.innerHTML += `<br>${time}: ${msg}`;
            log.scrollTop = log.scrollHeight;
        }
    }

    showStatus(msg, type = 'info') {
        console.log(`${type}: ${msg}`);
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    }

    showError(msg) {
        this.showStatus(msg, 'error');

        const errorDiv = document.querySelector('.access-denied-screen .access-denied-text');
        if (errorDiv) {
            errorDiv.textContent = msg;
            document.querySelector('.access-denied-screen')?.classList.remove('hidden');
        }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

    setTheme(theme) {
        document.body.setAttribute('data-theme', theme);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–µ–º
        const buttons = document.querySelectorAll('.theme-btn');
        buttons.forEach(btn => {
            if (btn.dataset.theme === theme) {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }
        });
    }

    localStorageAvailable = (() => {
        try {
            const test = '__localStorage_test__';
            localStorage.setItem(test, test);
            localStorage.removeItem(test);
            return true;
        } catch {
            return false;
        }
    })();

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
    loadLinkAutoSave() {
        const saved = localStorage.getItem('telegram_sender_link_auto_save');
        this.linkAutoSave = saved !== 'false'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ false
        console.log('üîó Loaded auto-save setting:', this.linkAutoSave);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    initModalEvents() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal-backdrop') || e.target.classList.contains('wizard-close-btn')) {
                this.closeAllModals();
            }
        });

        // –ö–ª–∞–≤–∏—à–∞ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeAllModals();
            }
        });
    }

    // –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –ú–ï–¢–û–î –ó–ê–ö–†–´–¢–ò–Ø –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù –° –û–ß–ò–°–¢–ö–û–ô
    closeModalSafe(modalId) {
        try {
            const modal = document.getElementById(modalId);
            if (!modal) {
                console.warn(`Modal ${modalId} not found`);
                return false;
            }

            // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            modal.style.display = 'none';

            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å show —Å backdrop'–∞
            const backdrop = document.getElementById('modalBackdrop');
            if (backdrop) {
                backdrop.classList.remove('show');
            }

            console.log(`‚úÖ Modal ${modalId} closed safely`);
            return true;
        } catch (error) {
            console.error(`‚ùå Failed to close modal ${modalId}:`, error);
            return false;
        }
    }

    closeAllModals() {
        console.log('üîΩ Closing all modals...');

        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å show —Å backdrop
        const backdrop = document.getElementById('modalBackdrop');
        if (backdrop) {
            backdrop.classList.remove('show');
            console.log('‚úÖ Backdrop show class removed');
        }

        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ (—Ç–æ–ª—å–∫–æ wizard-modal, –Ω–µ backdrop)
        const modals = document.querySelectorAll('.wizard-modal');
        modals.forEach(modal => {
            modal.style.display = 'none';
            console.log(`‚úÖ Modal ${modal.id || 'unknown'} closed`);
        });

        console.log('‚úÖ All modals closed via closeAllModals');
    }

    /**
     * –ü–†–û–ö–°–ò –ú–ï–¢–û–î –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –®–ê–ë–õ–û–ù–ê –°–°–´–õ–ö–ò
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ inline –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ onclick –≤ index.html
     */
    addLinkTemplate(text, url) {
        if (this.modules?.messaging && typeof this.modules.messaging.addLinkTemplate === 'function') {
            return this.modules.messaging.addLinkTemplate(text, url);
        } else {
            console.error('‚ùå addLinkTemplate method not found in messaging module');
            alert('–ú–æ–¥—É–ª—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return null;
        }
    }

    /**
     * –ü–†–û–ö–°–ò –ú–ï–¢–û–î –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ò–ó SHEETS
     * –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
     */
    reloadUsersData() {
        if (this.modules?.users && typeof this.modules.users.reloadUsersData === 'function') {
            console.log('üìä Reloading users data via main app proxy...');
            return this.modules.users.reloadUsersData();
        } else {
            console.error('‚ùå reloadUsersData method not found in users module');
            this.showStatus('–ú–æ–¥—É–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'error');
            return null;
        }
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
function addToLog(message) { window.telegramSender?.addToLog(message); }
function showStatus(message, type) { window.telegramSender?.showStatus(message, type); }

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.closeAllModals = function() { window.telegramSender?.closeAllModals(); };
window.getTelegramSender = () => window.telegramSender;

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
window.showUserMessageHistory = function(userId) {
    console.log('üîó showUserMessageHistory called with userId:', userId);

    if (window.telegramSender?.modules?.users?.showUserDetails) {
        console.log('‚úÖ Forwarding to showUserDetails method');
        window.telegramSender.modules.users.showUserDetails(userId);
    } else {
        console.error('‚ùå TelegramSender users module not initialized');
        alert('–ú–æ–¥—É–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
};

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
document.addEventListener('DOMContentLoaded', () => {
    console.log('üèÅ Starting TelegramSender app...');
    window.telegramSender = new TelegramSender();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.TelegramSender = TelegramSender;
