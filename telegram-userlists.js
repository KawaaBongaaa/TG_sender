/**
 * TelegramSender User Lists Module
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
 */

class TelegramUserLists {
    constructor(parent) {
        this.parent = parent; // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å TelegramSender
        this.userLists = []; // –ú–∞—Å—Å–∏–≤ —Å–ø–∏—Å–∫–æ–≤: [{id, name, userIds: Set, created: ISO, updated: ISO}]
        this.activeListId = null; // ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

        console.log('üìã TelegramUserLists module initialized');
    }

    /**
     * –ó–ê–ì–†–£–ó–ö–ê –°–ü–ò–°–ö–û–í –ò–ó localStorage
     */
    loadLists() {
        try {
            const data = localStorage.getItem('telegram_sender_user_lists');
            const loadedLists = data ? JSON.parse(data) : [];

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤—ã userIds –æ–±—Ä–∞—Ç–Ω–æ –≤ Set –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã
            this.userLists = loadedLists.map(list => ({
                ...list,
                userIds: new Set(list.userIds || [])
            }));

            console.log('üìã Loaded user lists:', this.userLists.length, 'lists');
        } catch (error) {
            console.warn('‚ùå Failed to load user lists:', error);
            this.userLists = [];
        }
    }

    /**
     * –°–û–•–†–ê–ù–ï–ù–ò–ï –°–ü–ò–°–ö–û–í –í localStorage
     */
    saveLists() {
        try {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Set –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤—ã –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            const dataToSave = this.userLists.map(list => ({
                ...list,
                userIds: Array.from(list.userIds || [])
            }));

            localStorage.setItem('telegram_sender_user_lists', JSON.stringify(dataToSave));
            console.log('üíæ User lists saved');
        } catch (error) {
            console.error('‚ùå Failed to save user lists:', error);
        }
    }

    /**
     * –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –°–ü–ò–°–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
     */
    createList(name, userIds = [], description = '') {
        if (!name || !name.trim()) {
            throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
        const existingList = this.userLists.find(list =>
            list.name.toLowerCase() === name.trim().toLowerCase()
        );

        if (existingList) {
            throw new Error(`–°–ø–∏—Å–æ–∫ —Å –∏–º–µ–Ω–µ–º "${name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }

        const newList = {
            id: 'userlist_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
            name: name.trim(),
            description: description.trim(),
            userIds: new Set(userIds),
            created: new Date().toISOString(),
            updated: new Date().toISOString(),
            usage_count: 0
        };

        this.userLists.push(newList);
        this.saveLists();

        console.log('üìã Created new user list:', newList.name);
        this.parent.addToLog(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫: ${newList.name}`);

        return newList;
    }

    /**
     * –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –°–ü–ò–°–û–ö
     */
    addUsersToList(listId, userIds) {
        const list = this.userLists.find(l => l.id === listId);
        if (!list) {
            throw new Error('–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const addedCount = userIds.filter(id => !list.userIds.has(id)).length;

        userIds.forEach(userId => {
            list.userIds.add(userId);
        });

        list.updated = new Date().toISOString();

        this.saveLists();

        console.log('üìã Added users to list:', list.name, 'added:', addedCount);
        if (addedCount > 0) {
            this.parent.addToLog(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–æ–∫ "${list.name}"`);
        }

        return list;
    }

    /**
     * –£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ò–ó –°–ü–ò–°–ö–ê
     */
    removeUsersFromList(listId, userIds) {
        const list = this.userLists.find(l => l.id === listId);
        if (!list) {
            throw new Error('–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const removedCount = userIds.filter(id => list.userIds.has(id)).length;

        userIds.forEach(userId => {
            list.userIds.delete(userId);
        });

        list.updated = new Date().toISOString();

        this.saveLists();

        console.log('üìã Removed users from list:', list.name, 'removed:', removedCount);
        if (removedCount > 0) {
            this.parent.addToLog(`–£–¥–∞–ª–µ–Ω–æ ${removedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ "${list.name}"`);
        }

        return list;
    }

    /**
     * –ü–†–û–°–ú–û–¢–† –°–ü–ò–°–ö–ê –ü–û ID
     */
    getList(listId) {
        return this.userLists.find(l => l.id === listId);
    }

    /**
     * –ü–†–û–°–ú–û–¢–† –°–ü–ò–°–ö–ê –ü–û –ò–ú–ï–ù–ò
     */
    getListByName(name) {
        return this.userLists.find(l =>
            l.name.toLowerCase() === name.toLowerCase()
        );
    }

    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–õ–¨–ù–´–• –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ò–ó –°–ü–ò–°–ö–ê
     */
    getUsersFromList(listId) {
        const list = this.getList(listId);
        if (!list) return [];

        return Array.from(list.userIds || [])
            .map(userId => {
                // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                return this.parent.filteredUsers.find(u => u.user_id == userId) ||
                       this.parent.usersData.find(u => u.user_id == userId);
            })
            .filter(user => user !== undefined);
    }

    /**
     * –ê–ö–¢–ò–í–ê–¶–ò–Ø –°–ü–ò–°–ö–ê (–£–°–¢–ê–ù–û–í–ö–ê –ï–ì–û –ö–ê–ö –í–´–ë–†–ê–ù–ù–´–ô)
     */
    selectList(listId) {
        const list = this.getList(listId);
        if (!list) return false;

        this.activeListId = listId;

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        this.selectUsersFromList(listId);

        console.log('üìã Selected user list:', list.name);
        this.parent.addToLog(`–í—ã–±—Ä–∞–Ω —Å–ø–∏—Å–æ–∫: ${list.name}`);

        return true;
    }

    /**
     * –í–´–ë–û–† –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ò–ó –°–ü–ò–°–ö–ê –í –ò–ù–¢–ï–†–§–ï–ô–°–ï
     */
    selectUsersFromList(listId) {
        const list = this.getList(listId);
        if (!list) return false;

        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
        this.parent.selectedUsers.clear();

        // –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞
        list.userIds.forEach(userId => {
            this.parent.selectedUsers.add(userId);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
        this.updateTableSelection();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        this.parent.users.updateSelectedCount();

        return Array.from(list.userIds).length;
    }

    /**
     * –û–ë–ù–û–í–õ–ï–ù–ò–ï –ß–ï–ö–ë–û–ö–°–û–í –í –¢–ê–ë–õ–ò–¶–ï –ü–û –¢–ï–ö–£–©–ï–ú–£ –í–´–ë–û–†–£
     */
    updateTableSelection() {
        const checkboxes = document.querySelectorAll('.user-checkbox');
        checkboxes.forEach(cb => {
            const userId = cb.dataset.userId;
            cb.checked = this.parent.selectedUsers.has(userId);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä-—á–µ–∫–±–æ–∫—Å
        const masterCheckbox = document.getElementById('masterUserCheckbox');
        if (masterCheckbox) {
            const totalCheckboxes = checkboxes.length;
            const checkedCheckboxes = document.querySelectorAll('.user-checkbox:checked').length;
            masterCheckbox.checked = totalCheckboxes > 0 && checkedCheckboxes === totalCheckboxes;
        }
    }

    /**
     * –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–ï–ö–£–©–ò–• –í–´–ë–†–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í –°–ü–ò–°–û–ö
     */
    saveSelectedToList(listId) {
        if (this.parent.selectedUsers.size === 0) {
            throw new Error('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        }

        const selectedIds = Array.from(this.parent.selectedUsers);
        return this.addUsersToList(listId, selectedIds);
    }

    /**
     * –°–û–•–†–ê–ù–ï–ù–ò–ï –í–´–ë–†–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í –ù–û–í–´–ô –°–ü–ò–°–û–ö
     */
    saveSelectedAsNewList(listName, description = '') {
        if (this.parent.selectedUsers.size === 0) {
            throw new Error('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        }

        const selectedIds = Array.from(this.parent.selectedUsers);
        return this.createList(listName, selectedIds, description);
    }

    /**
     * –£–î–ê–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê
     */
    deleteList(listId) {
        const index = this.userLists.findIndex(l => l.id === listId);
        if (index === -1) {
            throw new Error('–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const listName = this.userLists[index].name;
        this.userLists.splice(index, 1);

        // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π
        if (this.activeListId === listId) {
            this.activeListId = null;
        }

        this.saveLists();

        console.log('‚ùå Deleted user list:', listName);
        this.parent.addToLog(`–£–¥–∞–ª–µ–Ω —Å–ø–∏—Å–æ–∫: ${listName}`);

        return listName;
    }

    /**
     * –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–ï –°–ü–ò–°–ö–ê
     */
    renameList(listId, newName) {
        if (!newName || !newName.trim()) {
            throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
        }

        const list = this.getList(listId);
        if (!list) {
            throw new Error('–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
        const existingList = this.userLists.find(l =>
            l.id !== listId && l.name.toLowerCase() === newName.trim().toLowerCase()
        );

        if (existingList) {
            throw new Error(`–°–ø–∏—Å–æ–∫ —Å –∏–º–µ–Ω–µ–º "${newName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }

        const oldName = list.name;
        list.name = newName.trim();
        list.updated = new Date().toISOString();

        this.saveLists();

        console.log('üìù Renamed list:', oldName, '->', newName);
        this.parent.addToLog(`–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: ${oldName} ‚Üí ${newName}`);

        return list;
    }

    /**
     * –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –°–ü–ò–°–ö–û–í –° –û–ë–ù–û–í–õ–ï–ù–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
     *
     * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Google Sheets
     * –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–∞—Ö
     */
    syncWithUserData() {
        let totalSynced = 0;

        this.userLists.forEach(list => {
            const listUserIds = Array.from(list.userIds || []);
            const existingUsers = listUserIds.filter(userId =>
                this.parent.usersData.some(u => u.user_id == userId)
            );

            const removedCount = listUserIds.length - existingUsers.length;

            if (removedCount > 0) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫, —É–¥–∞–ª—è—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                list.userIds = new Set(existingUsers);
                list.updated = new Date().toISOString();
                totalSynced++;
                console.log(`üîÑ Synced list "${list.name}": removed ${removedCount} non-existent users`);
            }
        });

        if (totalSynced > 0) {
            this.saveLists();
            console.log('‚úÖ Synchronized all user lists with current user data');
        }
    }

    /**
     * –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ü–ò–°–ö–ê–ú
     */
    getListsStatistics() {
        return this.userLists.map(list => {
            const userCount = list.userIds ? list.userIds.size : 0;
            const activeUsers = Array.from(list.userIds || []).filter(userId =>
                this.parent.usersData.some(u => u.user_id == userId)
            ).length;

            return {
                id: list.id,
                name: list.name,
                userCount: userCount,
                activeUsers: activeUsers,
                created: list.created,
                updated: list.updated
            };
        });
    }

    /**
     * –û–ß–ò–°–¢–ö–ê –í–°–ï–• –°–ü–ò–°–ö–û–í (–î–õ–Ø –û–¢–õ–ê–î–ö–ò –ò–õ–ò –°–ë–†–û–°–ê)
     */
    clearAllLists() {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å –í–°–ï —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
            return false;
        }

        this.userLists = [];
        this.activeListId = null;
        this.saveLists();

        console.log('üßπ Cleared all user lists');
        this.parent.addToLog('–û—á–∏—â–µ–Ω—ã –≤—Å–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');

        return true;
    }

    /**
     * –†–ï–ù–î–ï–† –°–ü–ò–°–ö–û–í –í UI –≠–õ–ï–ú–ï–ù–¢
     */
    renderListsDropdown(containerId) {
        const container = document.getElementById(containerId);
        if (!container) return;

        if (this.userLists.length === 0) {
            container.innerHTML = '<div style="color: var(--text-tertiary); font-style: italic; padding: 8px;">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤</div>';
            return;
        }

        let html = '<div style="max-height: 200px; overflow-y: auto;">';

        this.userLists.forEach(list => {
            const userCount = list.userIds ? list.userIds.size : 0;
            const isActive = list.id === this.activeListId;

            html += `
                <div class="user-list-item ${isActive ? 'active' : ''}"
                     style="padding: 8px; margin-bottom: 4px; border: 1px solid var(--border); border-radius: 6px; background: ${isActive ? 'var(--accent-bg)' : 'var(--bg-secondary)'}; cursor: pointer;"
                     data-list-id="${list.id}"
                     onclick="telegramSender.userLists.selectList('${list.id}')">

                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div style="font-weight: 600; color: var(--text-primary);">${list.name}</div>
                        <div style="color: var(--text-secondary); font-size: 12px;">üë• ${userCount}</div>
                    </div>

                    <div style="display: flex; gap: 4px; margin-top: 4px;">
                        <button onclick="event.stopPropagation(); telegramSender.userLists.selectUsersFromList('${list.id}')"
                                style="padding: 2px 6px; font-size: 10px; background: var(--accent-primary); color: var(--text-inverse); border: none; border-radius: 3px; cursor: pointer;">
                            –í—ã–±—Ä–∞—Ç—å
                        </button>
                        <button onclick="event.stopPropagation(); telegramSender.showBroadcastFromListDialog('${list.id}')"
                                style="padding: 2px 6px; font-size: 10px; background: var(--accent-success); color: var(--text-inverse); border: none; border-radius: 3px; cursor: pointer;">
                            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                        </button>
                        <button onclick="event.stopPropagation(); telegramSender.showEditListDialog('${list.id}')"
                                style="padding: 2px 6px; font-size: 10px; background: var(--bg-tertiary); color: var(--text-primary); border: 1px solid var(--border); border-radius: 3px; cursor: pointer;">
                            ‚öôÔ∏è
                        </button>
                    </div>
                </div>
            `;
        });

        html += '</div>';
        container.innerHTML = html;
    }

    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –î–õ–Ø –†–ê–°–°–´–õ–ö–ò
     */
    getListForBroadcast(listId) {
        const list = this.getList(listId);
        if (!list) {
            throw new Error('–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const users = this.getUsersFromList(listId);

        if (users.length === 0) {
            throw new Error(`–°–ø–∏—Å–æ–∫ "${list.name}" –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        list.usage_count = (list.usage_count || 0) + 1;
        this.saveLists();

        return {
            list: list,
            users: users
        };
    }

    /**
     * –≠–ö–°–ü–û–†–¢ –°–ü–ò–°–ö–ê –í CSV
     */
    exportListToCSV(listId) {
        const list = this.getList(listId);
        if (!list) {
            throw new Error('–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const users = this.getUsersFromList(listId);

        if (users.length === 0) {
            alert('–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç - –Ω–µ—á–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å');
            return;
        }

        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const headers = Object.keys(users[0]);

        // –°–æ–∑–¥–∞–µ–º CSV
        let csv = headers.join(',') + '\n';

        users.forEach(user => {
            const row = headers.map(header => {
                const value = user[header] || '';
                // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –∫–∞–≤—ã—á–∫–∏
                return `"${String(value).replace(/"/g, '""')}"`;
            });
            csv += row.join(',') + '\n';
        });

        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const filename = `telegram_users_list_${list.name}_${new Date().toISOString().split('T')[0]}.csv`;
        this.parent.downloadFile(filename, csv, 'text/csv');

        this.parent.addToLog(`–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —Å–ø–∏—Å–æ–∫ "${list.name}" (${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)`);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TelegramUserLists;
} else {
    // –î–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.TelegramUserLists = TelegramUserLists;
}
