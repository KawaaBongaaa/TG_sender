/**
 * TelegramSender Messaging Module
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫
 */

class TelegramMessaging {
    constructor(parent) {
        this.parent = parent; // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å TelegramSender
    }

    /**
     * –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ú–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ
     */
    async sendMessageToUser(user, message, buttons = null) {
        // –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ò –°–û–•–†–ê–ù–Ø–ï–ú –°–°–´–õ–ö–ò –ò–ó –°–û–û–ë–©–ï–ù–ò–Ø
        const savedLinks = this.processAndSaveLinksFromMessage(message);
        if (savedLinks.length > 0) {
            console.log(`üîó Processed and saved ${savedLinks.length} links from message for user ${user.user_id}`);
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            if (this.parent.renderLinkTemplatesDropdown) this.parent.renderLinkTemplatesDropdown();
            if (this.parent.renderLinkTemplatesManagement) this.parent.renderLinkTemplatesManagement();
        }

        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
        const config = window.CONFIG;
        const botToken = config.BOT_TOKEN;
        const userId = user.user_id;

        if (!botToken) {
            throw new Error('BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        let url = `https://api.telegram.org/bot${botToken}/sendMessage`;

        // –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏
        if (config.PROXY_URL) {
            url = config.PROXY_URL;
        }

        const requestBody = {
            chat_id: userId,
            text: message,
            parse_mode: 'HTML'
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å - –ø–æ–ª—É—á–∞–µ–º –∏–∑ –º–æ–¥—É–ª—è buttons
        const inlineKeyboard = this.parent.buttons.getInlineKeyboardButtons();
        if (inlineKeyboard) {
            requestBody.reply_markup = {
                inline_keyboard: inlineKeyboard
            };
        }

        console.log('üì§ Sending to user', userId + ':', message.substring(0, 50) + '...');

        // –ü—Ä–∏–º–µ–Ω—è–µ–º timeout –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
        if (this.parent.sendSchedule && this.parent.sendSchedule.messageTimeout > 0) {
            await this.parent.delay(this.parent.messageTimeout);
        }

        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody)
        });

        const result = await response.json();

        if (!response.ok || !result.ok) {
            throw new Error(result.description || `HTTP ${response.status}`);
        }

        console.log('‚úÖ Sent to user', userId, 'successfully');

        // –°–û–•–†–ê–ù–Ø–ï–ú –ò–°–¢–û–†–ò–Æ –°–û–û–ë–©–ï–ù–ò–ô –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        this.saveMessageToUserHistory(user.user_id, message, 'delivered');

        // –û–±–Ω–æ–≤–ª—è–µ–º last_sent –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.last_sent = new Date().toISOString();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ storage –º–æ–¥—É–ª—å
        this.parent.storage.saveUserMessageHistory();

        return result;
    }

    /**
     * –ú–ï–¢–û–î –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ò–ú–ï–ù–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í –¢–ê–ë–õ–ò–¶–ï
     */
    getFirstNameDisplay(user) {
        // –†–∞—Å—à–∏—Ä–∏–º –ø–æ–∏—Å–∫ –ø–æ–ª–µ–π –¥–ª—è –∏–º–µ–Ω - –≤–∫–ª—é—á–∞—è –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        const nameFields = ['first name', 'first_name', 'firstname', '–∏–º—è', 'name', 'fname', 'first', 'given_name', '–ò–º—è', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞'];
        for (const field of nameFields) {
            const value = user[field];
            if (value !== undefined && value !== null) {
                const trimmed = value.toString().trim();
                if (trimmed !== '') {
                    console.log(`‚úÖ Found first name "${trimmed}" in field "${field}" for user ${user.user_id || 'unknown'}`);
                    return trimmed;
                }
            }
        }
        console.log(`‚ùå First name not found for user ${user.user_id || 'unknown'}. Available fields:`, Object.keys(user));
        return '‚Äî';
    }

    /**
     * –ú–ï–¢–û–î –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –§–ê–ú–ò–õ–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í –¢–ê–ë–õ–ò–¶–ï
     */
    getLastNameDisplay(user) {
        // –†–∞—Å—à–∏—Ä–∏–º –ø–æ–∏—Å–∫ –ø–æ–ª–µ–π –¥–ª—è —Ñ–∞–º–∏–ª–∏–π - –≤–∫–ª—é—á–∞—è –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        const lastNameFields = ['last name', 'last_name', 'lastname', '—Ñ–∞–º–∏–ª–∏—è', 'surname', 'lname', 'last', 'family_name', '–§–∞–º–∏–ª–∏—è', '–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–§–∞–º–∏–ª–∏—è –∫–ª–∏–µ–Ω—Ç–∞'];
        for (const field of lastNameFields) {
            const value = user[field];
            if (value !== undefined && value !== null) {
                const trimmed = value.toString().trim();
                if (trimmed !== '') {
                    console.log(`‚úÖ Found last name "${trimmed}" in field "${field}"`);
                    return trimmed;
                }
            }
        }
        console.log(`‚ùå Last name not found for user ${user.user_id || 'unknown'}`);
        return '‚Äî';
    }

    /**
     * –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ü–û–°–õ–ï–î–ù–ï–ô –û–¢–ü–†–ê–í–ö–ò –° –ò–°–¢–û–†–ò–ò –°–û–û–ë–©–ï–ù–ò–ô
     */
    getLastSentDisplay(user) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userHistory = this.parent.userMessageHistory?.[user.user_id];
        if (userHistory && Array.isArray(userHistory) && userHistory.length > 0) {
            // –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ "delivered", –∞ –∏–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö)
            const sentMessages = userHistory
                .filter(entry => entry.status === 'delivered')
                .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

            if (sentMessages.length > 0) {
                const lastSent = sentMessages[0].timestamp; // –°–∞–º–∞—è —Å–≤–µ–∂–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                const lastMessageDate = new Date(lastSent);

                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                const now = new Date();
                const diffInDays = (now - lastMessageDate) / (1000 * 60 * 60 * 24);

                let timeText = '';
                if (diffInDays < 1) {
                    timeText = lastMessageDate.toLocaleTimeString('ru-RU', {
                        hour: '2-digit',
                        minute: '2-digit',
                        hour12: false
                    });
                } else if (diffInDays < 7) {
                    const daysAgo = Math.floor(diffInDays);
                    timeText = `${daysAgo} –¥. –Ω–∞–∑–∞–¥`;
                } else {
                    timeText = lastMessageDate.toLocaleDateString('ru-RU');
                }

                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                const buttonHtml = `
                    <button onclick="showUserMessageHistory('${user.user_id}')" class="history-btn" style="font-size: 11px; padding: 2px 4px; border: 1px solid #6c757d; background: #fff; border-radius: 3px; cursor: pointer; margin-left: 5px;"
                    title="–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
                        üìÑ${sentMessages.length > 1 ? `(${sentMessages.length})` : ''}
                    </button>
                `;

                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è + –∫–Ω–æ–ø–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–º —Ü–≤–µ—Ç–æ–º
                return `<span style="color: #007bff; font-weight: bold;">${timeText}</span>${buttonHtml}`;
            }
        }

        // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è, –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–ª–µ last_sent –∏–∑ CSV
        const dateFields = ['last_sent', 'last_send', '–ø–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞', 'sent_at', 'last_message'];
        for (const field of dateFields) {
            const value = user[field];
            if (value !== undefined && value !== null && value.toString().trim() !== '') {
                const date = new Date(value);
                if (!isNaN(date.getTime())) {
                    const diffInDays = (new Date() - date) / (1000 * 60 * 60 * 24);
                    let timeText = '';
                    if (diffInDays < 1) {
                        timeText = date.toLocaleTimeString('ru-RU', {
                            hour: '2-digit',
                            minute: '2-digit',
                            hour12: false
                        });
                    } else if (diffInDays < 7) {
                        const daysAgo = Math.floor(diffInDays);
                        timeText = `${daysAgo} –¥. –Ω–∞–∑–∞–¥`;
                    } else {
                        timeText = date.toLocaleDateString('ru-RU');
                    }

                    return `<span style="color: #dc3545;">${timeText}</span>`;
                }
            }
        }

        return `<span style="color: #6c757d; font-style: italic;">–Ω–∏–∫–æ–≥–¥–∞</span>`;
    }

    /**
     * –ú–ê–°–°–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê –í–°–ï–ú –í–´–ë–†–ê–ù–ù–´–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú
     */
    async startMassBroadcast() {
        const messageInput = document.getElementById('messageInput');
        const message = messageInput?.value?.trim() || '';

        if (!message) {
            alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const selectedUsers = this.parent.users.getSelectedUsers();
        if (selectedUsers.length === 0) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        const config = window.CONFIG;
        if (!config.BOT_TOKEN || config.BOT_TOKEN === "PLACEHOLDER_BOT_TOKEN") {
            alert('‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ config.js');
            return;
        }

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        const confirmMessage = `–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${selectedUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?\n\n‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`;
        if (!confirm(confirmMessage)) {
            return;
        }

        this.parent.addToLog(`üì§ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É ${selectedUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...`);
        this.parent.isSending = true;
        let successCount = 0;
        let errorCount = 0;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.parent.sendResults = [];

        try {
            for (let i = 0; i < selectedUsers.length; i++) {
                const user = selectedUsers[i];

                try {
                    this.parent.addToLog(`[${i+1}/${selectedUsers.length}] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}...`);

                    await this.sendMessageToUser(user, message, null);

                    successCount++;
                    this.parent.sendResults.push({
                        user_id: user.user_id,
                        success: true
                    });

                    this.parent.addToLog(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}`);

                    // –ü—Ä–æ–≥—Ä–µ—Å—Å
                    this.parent.sendProgress = Math.round(((i + 1) / selectedUsers.length) * 100);

                } catch (userError) {
                    errorCount++;
                    this.parent.sendResults.push({
                        user_id: user.user_id,
                        success: false,
                        error: userError.message
                    });

                    this.parent.addToLog(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}: ${userError.message}`);
                    console.error(`User ${user.user_id} error:`, userError);
                }
            }

            // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            const reportMessage = `üéØ –†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!\n\n` +
                `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n` +
                `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount} –∏–∑ ${selectedUsers.length}\n` +
                `‚ùå –û—à–∏–±–æ–∫: ${errorCount}\n\n` +
                `${errorCount > 0 ? '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö.' : '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã!'}`;

            this.parent.addToLog(reportMessage);
            alert(reportMessage);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if (this.parent.users && this.parent.users.applyFilters) {
                this.parent.users.applyFilters();
            }

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
            this.parent.addToLog('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: ' + error.message);
            alert('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ:\n\n' + error.message);
        }

        this.parent.isSending = false;
        this.parent.sendProgress = 0;
    }

    /**
     * –û–¢–ú–ï–ù–ê –¢–ï–ö–£–©–ï–ô –û–¢–ü–†–ê–í–ö–ò
     */
    cancelCurrentBroadcast() {
        if (!this.parent.isSending) {
            alert('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã');
            return;
        }

        this.parent.addToLog('‚ö†Ô∏è –û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏...');
        this.parent.isSending = false;
        this.parent.sendProgress = 0;

        setTimeout(() => {
            this.parent.addToLog('‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
            alert('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        }, 500);
    }

    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –í–´–ë–†–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –î–õ–Ø –†–ê–°–°–´–õ–ö–ò
     */
    getSelectedUsersForBroadcast() {
        if (!this.parent.users) return [];

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ –º–æ–¥—É–ª—è users
        return this.parent.users.getSelectedUsers();
    }

    /**
     * –û–¢–ü–†–ê–í–ö–ê –ü–†–û–°–¢–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
     */
    async startSimpleBroadcast() {
        const messageInput = document.getElementById('messageInput');
        const message = messageInput?.value?.trim() || '';

        if (!message) {
            alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!');
            return;
        }

        if (this.parent.filteredUsers.length === 0) {
            alert('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        const config = window.CONFIG;
        if (!config.BOT_TOKEN || config.BOT_TOKEN === "PLACEHOLDER_BOT_TOKEN") {
            alert('‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ config.js');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!this.parent.filteredUsers[0]?.user_id) {
            alert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö.');
            return;
        }

        // –ü–æ–∫–∞–∂–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        console.log('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:', {
            botToken: config.BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            proxy: config.PROXY_URL || '–Ω–µ—Ç',
            adminId: config.ADMIN_ID,
            userCount: this.parent.filteredUsers.length,
            firstUserId: this.parent.filteredUsers[0].user_id,
            messageLength: message.length
        });

        // –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –°–°–´–õ–ö–ò –í –°–û–û–ë–©–ï–ù–ò–ò –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô
        const savedLinks = this.processAndSaveLinksFromMessage(message);
        if (savedLinks.length > 0) {
            this.parent.addToLog(`üîó –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${savedLinks.length}`);
            this.parent.renderLinkTemplatesDropdown();
            this.parent.renderLinkTemplatesManagement();
        }

        this.parent.addToLog('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
        this.parent.isSending = true;

        try {
            const testUser = this.parent.filteredUsers[0]; // –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ —Ç–µ—Å—Ç
            this.parent.addToLog(`üéØ –¶–µ–ª—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID ${testUser.user_id}`);

            await this.sendMessageToUser(testUser, message, null);

            this.parent.addToLog('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
            alert(`‚úÖ –ì–û–¢–û–í–û! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${testUser.user_id}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ: —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ –≤ Telegram`);

            // –û–±–Ω–æ–≤–ª—è–µ–º last_sent –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (this.parent.users && this.parent.users.applyFilters) {
                this.parent.users.applyFilters();
            }

        } catch (error) {
            console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
            this.parent.addToLog('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + error.message);

            // –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏
            if (error.message.includes('Unauthorized')) {
                alert('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞!\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n1. BOT_TOKEN –≤ config.js –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π\n2. –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω –≤ Telegram\n3. –¢–æ–∫–µ–Ω –∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤');
            } else if (error.message.includes('Bad Request')) {
                alert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:\n\n' + error.message);
            } else if (error.message.includes('Forbidden')) {
                alert('‚ùå –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤');
            } else {
                alert('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:\n\n' + error.message);
            }
        }

        this.parent.isSending = false;
    }

    /**
     * –û–ë–†–ê–ë–û–¢–ö–ê –°–°–´–õ–û–ö –ò–ó –°–û–û–ë–©–ï–ù–ò–ô
     */
    processAndSaveLinksFromMessage(message) {
        if (!message || !this.parent.linkAutoSave) return [];

        const savedLinks = [];

        // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ HTML —Å—Å—ã–ª–æ–∫
        const linkRegex = /<a\s+href=["']([^"']+)["'][^>]*>([^<]+)<\/a>/gi;
        let match;

        while ((match = linkRegex.exec(message)) !== null) {
            const url = match[1].trim();
            const text = match[2].trim();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
            try {
                new URL(url);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –∫–∞–∫ —à–∞–±–ª–æ–Ω
                const savedTemplate = this.autoSaveLinkOnInsert(text, url);
                if (savedTemplate) {
                    savedLinks.push(savedTemplate);
                }
            } catch (error) {
                console.warn('–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:', url);
            }
        }

        return savedLinks;
    }

    /**
     * –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –°–°–´–õ–ö–ò
     */
    autoSaveLinkOnInsert(text, url) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å—Å—ã–ª–∫–∞
        const existingIndex = this.parent.linkTemplates.findIndex(link =>
            link.text === text && link.url === url
        );

        if (existingIndex >= 0) {
            console.log('üîó Link template already exists, skipping auto-save');
            return null;
        }

        // –°–æ–∑–¥–∞–µ–º –∏–º—è —à–∞–±–ª–æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        const templateName = text.length > 20 ? text.substring(0, 20) + '...' : text;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        let uniqueName = templateName;
        let counter = 1;
        while (this.parent.linkTemplates.some(link => link.name === uniqueName)) {
            uniqueName = `${templateName} (${counter})`;
            counter++;
        }

        const template = {
            id: 'link_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
            name: uniqueName,
            text: text,
            url: url,
            created: new Date().toISOString(),
            usage_count: 0
        };

        this.parent.linkTemplates.push(template);
        this.parent.saveLinkTemplates();

        console.log('üîó Auto-saved link template:', template.name);
        this.parent.addToLog(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —à–∞–±–ª–æ–Ω —Å—Å—ã–ª–∫–∏: ${template.name}`);

        return template;
    }

    /**
     * –°–û–•–†–ê–ù–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –í –ò–°–¢–û–†–ò–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
     */
    saveMessageToUserHistory(userId, message, status) {
        if (!this.parent.userMessageHistory[userId]) {
            this.parent.userMessageHistory[userId] = [];
        }

        this.parent.userMessageHistory[userId].push({
            timestamp: new Date().toISOString(),
            message: message,
            status: status
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–µ—Ä–µ–∑ storage –º–æ–¥—É–ª—å
        if (this.parent.storage && this.parent.storage.saveUserMessageHistory) {
            this.parent.storage.saveUserMessageHistory();
        }
    }

    /**
     * –î–û–ë–ê–í–õ–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ê –°–°–´–õ–ö–ò
     */
    addLinkTemplate(text, url, name = '') {
        if (!text || !url) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ URL —Å—Å—ã–ª–∫–∏!');
            return null;
        }

        try {
            new URL(url);
        } catch (error) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL (—Å http:// –∏–ª–∏ https://)!');
            return null;
        }

        const templateName = name.trim() || (text.length > 20 ? text.substring(0, 20) + '...' : text);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        const existingIndex = this.parent.linkTemplates.findIndex(link =>
            link.text === text && link.url === url
        );

        if (existingIndex >= 0) {
            alert('–¢–∞–∫–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
            return null;
        }

        const template = {
            id: 'link_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
            name: templateName,
            text: text.trim(),
            url: url.trim(),
            created: new Date().toISOString(),
            usage_count: 0
        };

        this.parent.linkTemplates.push(template);
        this.parent.saveLinkTemplates();

        console.log('üîó Added link template:', template.name);
        this.parent.addToLog(`–°–æ—Ö—Ä–∞–Ω–µ–Ω —à–∞–±–ª–æ–Ω —Å—Å—ã–ª–∫–∏: ${template.name}`);

        return template;
    }

    /**
     * –£–î–ê–õ–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ê –°–°–´–õ–ö–ò
     */
    deleteLinkTemplate(templateId) {
        const index = this.parent.linkTemplates.findIndex(link => link.id === templateId);
        if (index === -1) return false;

        const templateName = this.parent.linkTemplates[index].name;
        this.parent.linkTemplates.splice(index, 1);
        this.parent.saveLinkTemplates();

        console.log('‚ùå Link template deleted:', templateName);
        this.parent.addToLog(`–£–¥–∞–ª–µ–Ω —à–∞–±–ª–æ–Ω —Å—Å—ã–ª–∫–∏: ${templateName}`);

        return true;
    }

    /**
     * –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ê –°–°–´–õ–ö–ò
     */
    applyLinkTemplate(templateId) {
        const template = this.parent.linkTemplates.find(link => link.id === templateId);
        if (!template) {
            console.warn('Link template not found:', templateId);
            return false;
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        template.usage_count = (template.usage_count || 0) + 1;
        this.parent.saveLinkTemplates();

        const messageInput = document.getElementById('messageInput');
        if (messageInput) {
            const currentText = messageInput.value;
            const cursorPos = messageInput.selectionStart;
            const textBefore = currentText.substring(0, cursorPos);
            const textAfter = currentText.substring(cursorPos);

            // –°–æ–∑–¥–∞–µ–º HTML —Å—Å—ã–ª–∫—É
            const htmlLink = `<a href="${template.url}">${template.text}</a>`;

            // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ - –µ—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º–∞—è —Å—Å—ã–ª–∫–∞ —Å —Ç–æ–π –∂–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
            if (textBefore.endsWith(htmlLink)) {
                // –í–º–µ—Å—Ç–æ –≤—Å—Ç–∞–≤–∫–∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ–π —Å—Å—ã–ª–∫–∏, –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                messageInput.value = textBefore + textAfter;
                messageInput.setSelectionRange(cursorPos, cursorPos);
            } else {
                // –û–±—ã—á–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞
                messageInput.value = textBefore + htmlLink + textAfter;
                const newCursorPos = cursorPos + htmlLink.length;
                messageInput.setSelectionRange(newCursorPos, newCursorPos);
            }

            messageInput.focus();

            console.log('üîó Applied link template:', template.name);
            this.parent.addToLog(`–ü—Ä–∏–º–µ–Ω–µ–Ω —à–∞–±–ª–æ–Ω —Å—Å—ã–ª–∫–∏: ${template.name}`);

            return true;
        }
        return false;
    }
}
